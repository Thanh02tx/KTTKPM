import os
import time
import uuid
import json
import base64
import mimetypes
import requests
from rest_framework.permissions import AllowAny
from rest_framework.response import Response
from rest_framework import status
from .serializers import MedicineSerializer,PrescriptionSerializer,PrescriptionMedicineSerializer,PaymentMethodSerializer,InvoiceSerializer
from .models import Prescription, PrescriptionMedicine, Medicine,PaymentMethod,Invoice
from django.db import transaction
from rest_framework.decorators import api_view, parser_classes
from rest_framework.parsers import MultiPartParser, FormParser
import cloudinary.uploader


IMAGE_INVOICE = r"D:\final-microservice\image\invoice"

IMAGE_PRES=r"D:\final-microservice\image\prescription"
URL_USER_SV = "http://localhost:8001"
URL_APPT_SV = "http://localhost:8002"
@api_view(['POST'])  
def create_medicine(request):
    if request.method == 'POST':
        # T·∫°o serializer t·ª´ d·ªØ li·ªáu request
        serializer = MedicineSerializer(data=request.data)
        
        if serializer.is_valid():  # Ki·ªÉm tra t√≠nh h·ª£p l·ªá c·ªßa d·ªØ li·ªáu
            serializer.save()  # L∆∞u d·ªØ li·ªáu v√†o database
            return Response({
                'errCode': 0,  # Tr·∫£ v·ªÅ m√£ l·ªói 0 n·∫øu t·∫°o th√†nh c√¥ng
                'message': 'Medicine created successfully',
                'data': serializer.data  # D·ªØ li·ªáu ƒë√£ t·∫°o
            }, status=status.HTTP_201_CREATED)  # Tr·∫£ v·ªÅ m√£ tr·∫°ng th√°i HTTP 201 (Created)
        
        return Response({
            'errCode': 1,  # Tr·∫£ v·ªÅ m√£ l·ªói 1 n·∫øu c√≥ l·ªói
            'message': 'Invalid data',
            'errors': serializer.errors  # Tr·∫£ v·ªÅ c√°c l·ªói n·∫øu d·ªØ li·ªáu kh√¥ng h·ª£p l·ªá
        }, status=status.HTTP_400_BAD_REQUEST)

@api_view(['GET'])
def get_all_medicines(request):
    try:
        medicines = Medicine.objects.all()  # L·∫•y t·∫•t c·∫£ ƒë·ªëi t∆∞·ª£ng t·ª´ DB
        serializer = MedicineSerializer(medicines, many=True)  # Serialize danh s√°ch
        return Response({
            'errCode': 0,
            'message': 'Fetched all medicines successfully',
            'data': serializer.data
        }, status=status.HTTP_200_OK)
    except Exception as e:
        return Response({
            'errCode': 1,
            'message': f'Error fetching medicines: {str(e)}',
            'data': []
        }, status=status.HTTP_500_INTERNAL_SERVER_ERROR)



@api_view(['GET'])
def get_all_medicines_active(request):
    try:
        medicines = Medicine.objects.filter(is_active=True).values('id', 'name', 'unit', 'stock', 'price')
        return Response({
            'errCode': 0,
            'message': 'Fetched all active medicines successfully',
            'data': list(medicines)
        }, status=status.HTTP_200_OK)
    except Exception as e:
        return Response({
            'errCode': 1,
            'message': f'Error fetching medicines: {str(e)}',
            'data': []
        }, status=status.HTTP_500_INTERNAL_SERVER_ERROR)

@api_view(['POST'])
@parser_classes([MultiPartParser, FormParser])
@transaction.atomic
def create_prescription_and_prescription_medicines(request):
    try:
        # ‚úÖ 1. Ki·ªÉm tra token
        auth_header = request.headers.get('Authorization')
        if not auth_header or not auth_header.startswith('Bearer '):
            return Response({'errCode': 2, 'message': 'Thi·∫øu ho·∫∑c sai token'}, status=401)
        token = auth_header.split(' ')[1]

        # ‚úÖ 2. Ki·ªÉm tra vai tr√≤ b√°c sƒ©
        response = requests.get(
            f"{URL_USER_SV}/api/u/check-role-doctor",
            headers={'Authorization': f'Bearer {token}'}
        )
        if response.status_code != 200 or response.json().get('errCode') != 0:
            return Response({'errCode': 1, 'message': 'Kh√¥ng ph·∫£i b√°c sƒ©'}, status=403)

        # ‚úÖ 3. L·∫•y d·ªØ li·ªáu t·ª´ request
        medical_id = request.data.get('medical_id')
        note = request.data.get('note', '')
        image_file = request.FILES.get('image')
        medicines_data = request.data.get('prescription_medicines')

        if not medical_id or not image_file or not medicines_data:
            return Response({'errCode': 1, 'message': 'Thi·∫øu th√¥ng tin b·∫Øt bu·ªôc'}, status=400)

        # ‚úÖ 4. Ki·ªÉm tra ƒë·ªãnh d·∫°ng ·∫£nh
        ext = os.path.splitext(image_file.name)[-1].lower()
        if ext not in ['.png', '.jpg', '.jpeg', '.webp', '.gif']:
            return Response({'errCode': 11, 'message': f'ƒê·ªãnh d·∫°ng ·∫£nh kh√¥ng h·ªó tr·ª£: {ext}'}, status=400)

        # ‚úÖ 5. Upload ·∫£nh l√™n Cloudinary (v√†o th∆∞ m·ª•c 'prescriptions')
        file_name = f"prescription_{int(time.time())}_{uuid.uuid4().hex[:8]}"
        upload_result = cloudinary.uploader.upload(
            image_file,
            public_id=file_name,
            folder="prescriptions",           # üî• Ch·ªâ ƒë·ªãnh ƒë√∫ng th∆∞ m·ª•c
            resource_type="image",
            overwrite=True
        )
        cloudinary_url = upload_result.get('secure_url')

        # ‚úÖ 6. T·∫°o ƒë∆°n thu·ªëc
        prescription_data = {
            'medical_id': medical_id,
            'note': note,
            'image': cloudinary_url
        }
        prescription_serializer = PrescriptionSerializer(data=prescription_data)
        if not prescription_serializer.is_valid():
            return Response({
                'errCode': 2,
                'message': 'D·ªØ li·ªáu ƒë∆°n thu·ªëc kh√¥ng h·ª£p l·ªá',
                'errors': prescription_serializer.errors
            }, status=400)
        prescription_serializer.save()

        # ‚úÖ 7. T·∫°o c√°c thu·ªëc trong ƒë∆°n
        try:
            medicines_list = json.loads(medicines_data)
        except Exception as e:
            return Response({'errCode': 4, 'message': 'D·ªØ li·ªáu thu·ªëc kh√¥ng h·ª£p l·ªá (kh√¥ng parse ƒë∆∞·ª£c JSON)'}, status=400)

        for item in medicines_list:
            pres_medicine_data = {
                'prescription': prescription_serializer.instance.id,
                'medicine': item.get('id'),
                'price': item.get('price'),
                'quantity': item.get('quantity'),
                'directions_for_use': item.get('directions_for_use')
            }

            pres_medicine_serializer = PrescriptionMedicineSerializer(data=pres_medicine_data)
            if not pres_medicine_serializer.is_valid():
                return Response({
                    'errCode': 3,
                    'message': 'D·ªØ li·ªáu thu·ªëc kh√¥ng h·ª£p l·ªá',
                    'errors': pres_medicine_serializer.errors
                }, status=400)

            pres_medicine_serializer.save()

        # ‚úÖ 8. G·ªçi API c·∫≠p nh·∫≠t tr·∫°ng th√°i appointment
        status_res = requests.put(
            f"{URL_APPT_SV}/api/a/change-status-appointment",
            json={'medical_id': medical_id, 'status': 'done'}
        )
        if status_res.status_code != 200:
            return Response({'errCode': 5, 'message': 'Kh√¥ng c·∫≠p nh·∫≠t ƒë∆∞·ª£c tr·∫°ng th√°i'}, status=500)

        return Response({'errCode': 0, 'message': 'T·∫°o ƒë∆°n thu·ªëc th√†nh c√¥ng'}, status=201)

    except Exception as e:
        return Response({'errCode': 500, 'message': f'L·ªói h·ªá th·ªëng: {str(e)}'}, status=500)



@api_view(['GET'])
def get_prescription_by_medical_id(request):
    try:
        # L·∫•y medical_id t·ª´ query params
        medical_id = request.GET.get('medical_id')

        if not medical_id:
            return Response({
                "errCode": 1,
                "message": "Thi·∫øu medical_id",
                "data": {}
            }, status=status.HTTP_400_BAD_REQUEST)

        # Truy v·∫•n ƒë∆°n thu·ªëc v√† c√°c thu·ªëc trong ƒë∆°n
        try:
            prescription = Prescription.objects.prefetch_related('medicines__medicine').get(medical_id=medical_id)
        except Prescription.DoesNotExist:
            return Response({
                "errCode": 0,
                "message": "Kh√¥ng t√¨m th·∫•y ƒë∆°n thu·ªëc",
                "data": {}
            }, status=status.HTTP_200_OK)

        # T·∫°o response
        result = {
            "id": prescription.id,
            "medical_id": prescription.medical_id,
            "status": prescription.status,
            "note": prescription.note,
            "created_at": prescription.created_at,
            "image":prescription.image,
            "medicines": []
        }

        # Duy·ªát qua c√°c thu·ªëc trong ƒë∆°n v√† th√™m v√†o response
        for pres_med in prescription.medicines.all():
            result["medicines"].append({
                "prescription_medicine_id": pres_med.id,
                "medicine_id": pres_med.medicine.id,
                "medicine_name": pres_med.medicine.name,
                "stock": pres_med.medicine.stock,
                "price": pres_med.price,
                "quantity": pres_med.quantity,
                "directions_for_use": pres_med.directions_for_use,
                "status": pres_med.status
            })

        # Tr·∫£ v·ªÅ k·∫øt qu·∫£
        return Response({
            "errCode": 0,
            "message": "L·∫•y ƒë∆°n thu·ªëc th√†nh c√¥ng",
            "data": result
        }, status=status.HTTP_200_OK)

    except Exception as e:
        return Response({
            "errCode": -1,
            "message": f"L·ªói h·ªá th·ªëng: {str(e)}",
            "data": {}
        }, status=status.HTTP_500_INTERNAL_SERVER_ERROR)
        
@api_view(['GET'])
def get_active_payment_methods(request):
    try:
        methods = PaymentMethod.objects.filter(is_active=True)
        serializer = PaymentMethodSerializer(methods, many=True)
        return Response({
            "errCode": 0,
            "message": "L·∫•y danh s√°ch ph∆∞∆°ng th·ª©c thanh to√°n th√†nh c√¥ng",
            "data": serializer.data
        }, status=status.HTTP_200_OK)
    except Exception as e:
        return Response({
            "errCode": 1,
            "message": "L·ªói m√°y ch·ªß: " + str(e),
            "data": []
        }, status=status.HTTP_500_INTERNAL_SERVER_ERROR)
        

@api_view(['POST'])
@parser_classes([MultiPartParser, FormParser])
@transaction.atomic
def create_invoice(request):
    token = request.headers.get('Authorization')
    if not token:
        return Response({
            "errCode": 1,
            "message": "Kh√¥ng t√¨m th·∫•y token trong header"
        }, status=status.HTTP_400_BAD_REQUEST)

    try:
        # Ki·ªÉm tra vai tr√≤ pharmacist
        response = requests.get(
            f"{URL_USER_SV}/api/u/check-role-pharmacist",
            headers={'Authorization': token}
        )
    except requests.exceptions.RequestException as e:
        return Response({
            "errCode": 1,
            "message": f"L·ªói khi g·ªçi User Service: {str(e)}"
        }, status=status.HTTP_503_SERVICE_UNAVAILABLE)

    if response.status_code != 200 or response.json().get('errCode') != 0:
        return Response({
            "errCode": 1,
            "message": "B·∫°n kh√¥ng c√≥ quy·ªÅn pharmacist"
        }, status=status.HTTP_403_FORBIDDEN)

    pharmacist_id = response.json().get('user_id')

    try:
        # L·∫•y d·ªØ li·ªáu t·ª´ request
        prescription_id = request.data.get('prescription_id')
        totals = request.data.get('totals')
        payment_method_id = request.data.get('payment_method_id')
        list_pres_med = json.loads(request.data.get('list_pres_med'))

        image_file = request.FILES.get('image')
        if not image_file:
            return Response({
                "errCode": 10,
                "message": "Kh√¥ng c√≥ ·∫£nh ƒë∆∞·ª£c g·ª≠i l√™n"
            }, status=status.HTTP_400_BAD_REQUEST)

        # Ki·ªÉm tra ƒë·ªãnh d·∫°ng ·∫£nh
        ext = os.path.splitext(image_file.name)[-1].lower()
        if ext not in ['.png', '.jpg', '.jpeg', '.webp', '.gif']:
            return Response({
                "errCode": 11,
                "message": f"ƒê·ªãnh d·∫°ng ·∫£nh kh√¥ng h·ªó tr·ª£: {ext}"
            }, status=status.HTTP_400_BAD_REQUEST)

        # Upload ·∫£nh l√™n Cloudinary (v√†o th∆∞ m·ª•c 'invoices')
        timestamp = int(time.time())
        unique_id = uuid.uuid4().hex[:8]
        file_name = f"invoice_{timestamp}-{unique_id}"

        upload_result = cloudinary.uploader.upload(
            image_file,
            public_id=file_name,
            folder="invoices",  # L∆∞u ·∫£nh v√†o th∆∞ m·ª•c 'invoices' tr√™n Cloudinary
            resource_type="image",
            overwrite=True
        )
        cloudinary_url = upload_result.get('secure_url')

        # T·∫°o h√≥a ƒë∆°n
        invoice = Invoice.objects.create(
            pharmacist_id=pharmacist_id,
            totals=totals,
            prescription_id=prescription_id,
            payment_method_id=payment_method_id,
            image=cloudinary_url  # L∆∞u URL ·∫£nh t·ª´ Cloudinary
        )

        # C·∫≠p nh·∫≠t tr·∫°ng th√°i c·ªßa ƒë∆°n thu·ªëc
        prescription = Prescription.objects.get(id=prescription_id)
        prescription.status = 'sold'
        prescription.save()

        # C·∫≠p nh·∫≠t tr·∫°ng th√°i c·ªßa t·ª´ng thu·ªëc trong ƒë∆°n thu·ªëc v√† tr·ª´ stock
        for item in list_pres_med:
            pres_med_id = item.get('prescription_medicine_id')
            medicine_id = item.get('medicine_id')
            quantity = item.get('quantity')

            try:
                # Chuy·ªÉn stock_sold t·ª´ chu·ªói th√†nh ki·ªÉu int
                quantity = int(quantity)
                
                # C·∫≠p nh·∫≠t tr·∫°ng th√°i PrescriptionMedicine
                pres_med = PrescriptionMedicine.objects.get(id=pres_med_id)
                pres_med.status = 'sold'
                pres_med.save()
            except PrescriptionMedicine.DoesNotExist:
                continue
            except ValueError:
                return Response({
                    "errCode": 13,
                    "message": f"Gi√° tr·ªã stock kh√¥ng h·ª£p l·ªá cho prescription_medicine_id {pres_med_id}"
                }, status=status.HTTP_400_BAD_REQUEST)

            try:
                # C·∫≠p nh·∫≠t stock thu·ªëc
                medicine = Medicine.objects.get(id=medicine_id)

                if medicine.stock < quantity:
                    return Response({
                        "errCode": 12,
                        "message": f"Kh√¥ng ƒë·ªß thu·ªëc trong kho cho {medicine.name}"
                    }, status=status.HTTP_400_BAD_REQUEST)

                # Tr·ª´ ƒëi stock ƒë√£ b√°n
                medicine.stock -= quantity
                medicine.save()
            except Medicine.DoesNotExist:
                continue
            except ValueError:
                return Response({
                    "errCode": 13,
                    "message": f"Gi√° tr·ªã stock kh√¥ng h·ª£p l·ªá cho medicine_id {medicine_id}"
                }, status=status.HTTP_400_BAD_REQUEST)

        # Tr·∫£ v·ªÅ th√†nh c√¥ng khi ƒë√£ x·ª≠ l√Ω xong t·∫•t c·∫£
        return Response({
            "errCode": 0,
            "message": "T·∫°o h√≥a ƒë∆°n th√†nh c√¥ng"
        })


    except Exception as e:
        return Response({
            "errCode": 13,
            "message": f"L·ªói x·ª≠ l√Ω d·ªØ li·ªáu: {str(e)}"
        }, status=status.HTTP_500_INTERNAL_SERVER_ERROR)



@api_view(['GET'])
def get_image_prescription_by_medical_id(request):
    medical_id = request.GET.get('medical_id')

    if not medical_id:
        return Response({
            "errCode": 1,
            "message": "medical_id is required"
        }, status=status.HTTP_400_BAD_REQUEST)

    prescription = Prescription.objects.filter(medical_id=medical_id).first()

    if not prescription:
        return Response({
            "errCode": 2,
            "message": "Prescription not found"
        }, status=status.HTTP_404_NOT_FOUND)

    # X·ª≠ l√Ω ·∫£nh n·∫øu c√≥
    if prescription.image:
        image_path = os.path.join(IMAGE_PRES, prescription.image)
        if os.path.exists(image_path):
            with open(image_path, "rb") as f:
                encoded = base64.b64encode(f.read()).decode("utf-8")
                mime_type, _ = mimetypes.guess_type(image_path)
                if mime_type:
                    prescription.image = f"data:{mime_type};base64,{encoded}"
                else:
                    prescription.image = None
        else:
            prescription.image = None

    return Response({
        "errCode": 0,
        "message": "Success",
        "data": {
            "image": prescription.image,
        }
    }, status=status.HTTP_200_OK)
