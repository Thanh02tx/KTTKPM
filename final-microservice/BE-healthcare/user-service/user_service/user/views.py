# üîπ Python Standard Library
import os
import time
import uuid
import logging
import base64
import mimetypes
# üîπ Third-party Libraries
import jwt
from rest_framework import status
from rest_framework.decorators import api_view, permission_classes
from rest_framework.permissions import AllowAny
from rest_framework.response import Response
from rest_framework_simplejwt.tokens import AccessToken
from rest_framework.permissions import IsAuthenticated
# üîπ Django Imports
from django.conf import settings
from django.contrib.auth import authenticate, get_user_model
from django.db import transaction
from django.http import JsonResponse
from django.forms.models import model_to_dict
# üîπ Local App Imports
from .models import User, Doctor, BaseProfile,Nurse,Technician,Pharmacist,Cashier,Patient
from .serializers import DoctorSerializer,NurseSerializer,TechnicianSerializer,PharmacistSerializer,CashierSerializer,PatientSerializer
logger = logging.getLogger(__name__)
IMAGE_DOCTOR = r"D:\final-microservice\image\doctor"
IMAGE_NURSE = r"D:\final-microservice\image\nurse"
IMAGE_TECH = r"D:\final-microservice\image\technician"
IMAGE_PHARMA = r"D:\final-microservice\image\pharmacist"
IMAGE_CASHIER = r"D:\final-microservice\image\cashier"
IMAGE_PATIENT = r"D:\final-microservice\image\patient"
@api_view(['GET'])
@permission_classes([AllowAny])
def get_gender_choices(request):
    try:
        gender_choices = [{'value': key, 'label': label} for key, label in BaseProfile.GENDER_CHOICES]
        # Tr·∫£ v·ªÅ d·ªØ li·ªáu v·ªõi errCode = 0 (th√†nh c√¥ng)
        return Response({
            'errCode': 0,
            'errMessage': 'Success',
            'data': gender_choices
        })
    except Exception as e:
        # Tr·∫£ v·ªÅ l·ªói v·ªõi errCode = 1 v√† th√¥ng b√°o l·ªói
        return Response({
            'errCode': 1,
            'errMessage': str(e),
            'data': []
        })



# ƒêƒÉng k√Ω t√†i kho·∫£n m·ªõi

@api_view(['POST'])
@permission_classes([AllowAny])
def register_patient(request):
    # Ki·ªÉm tra n·∫øu request body c√≥ ch·ª©a 'email' v√† 'password'
    email = request.data.get('email')
    password = request.data.get('password')

    # Ki·ªÉm tra xem email ƒë√£ t·ªìn t·∫°i trong c∆° s·ªü d·ªØ li·ªáu hay ch∆∞a
    if get_user_model().objects.filter(email=email).exists():
        return Response({'errCode': 1, 'message': 'Email ƒë√£ t·ªìn t·∫°i'}, status=status.HTTP_400_BAD_REQUEST)

    # N·∫øu email ch∆∞a t·ªìn t·∫°i, t·∫°o t√†i kho·∫£n m·ªõi v·ªõi role m·∫∑c ƒë·ªãnh l√† 'patient'
    user = get_user_model().objects.create_user(email=email, password=password, role='patient')

    # Tr·∫£ v·ªÅ th√¥ng tin ng∆∞·ªùi d√πng ƒë√£ ƒëƒÉng k√Ω th√†nh c√¥ng
    return Response({
        'errCode': 0,
        'message': 'ƒêƒÉng k√Ω th√†nh c√¥ng',
    }, status=status.HTTP_201_CREATED)

@api_view(['GET'])
def get_email_from_token(request):
    auth_header = request.headers.get('Authorization')

    if not auth_header or not auth_header.startswith('Bearer '):
        return Response({'errCode': 1, 'message': 'Unauthorized'}, status=status.HTTP_401_UNAUTHORIZED)

    token = auth_header.split(' ')[1]

    try:
        # Gi·∫£i m√£ token
        decoded = jwt.decode(token, settings.SECRET_KEY, algorithms=["HS256"])
        user_id = decoded.get('user_id')

        if not user_id:
            return Response({'errCode': 2, 'message': 'Token kh√¥ng ch·ª©a user_id'}, status=status.HTTP_400_BAD_REQUEST)

        User = get_user_model()
        user = User.objects.filter(id=user_id).first()

        if not user:
            return Response({'errCode': 3, 'message': 'Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i'}, status=status.HTTP_404_NOT_FOUND)

        email = user.email
        return Response({'errCode': 0, 'message': 'L·∫•y email th√†nh c√¥ng', 'data': {'email': email}}, status=status.HTTP_200_OK)

    except jwt.ExpiredSignatureError:
        return Response({'errCode': 4, 'message': 'Token ƒë√£ h·∫øt h·∫°n'}, status=status.HTTP_401_UNAUTHORIZED)
    except jwt.InvalidTokenError:
        return Response({'errCode': 5, 'message': 'Token kh√¥ng h·ª£p l·ªá'}, status=status.HTTP_401_UNAUTHORIZED)
    except Exception as e:
        return Response({'errCode': 6, 'message': 'L·ªói h·ªá th·ªëng', 'error': str(e)}, status=status.HTTP_500_INTERNAL_SERVER_ERROR)

@api_view(['POST'])
@permission_classes([AllowAny])
def login(request):
    email = request.data.get('email')
    password = request.data.get('password')

    user = authenticate(request, email=email, password=password)
    if user is not None:
        token = AccessToken.for_user(user)
        # ‚úÖ Th√™m email v√†o payload
        token['email'] = user.email

        return Response({
            "errCode": 0,
            "message": "ƒêƒÉng nh·∫≠p th√†nh c√¥ng.",
            "data": {
                "token": str(token),
                "email": user.email,
                "role":user.role
            }
        }, status=status.HTTP_200_OK)

    return Response({
        "errCode": 2,
        "message": "Th√¥ng tin ƒëƒÉng nh·∫≠p kh√¥ng ch√≠nh x√°c.",
    }, status=status.HTTP_401_UNAUTHORIZED)

@api_view(['GET'])
def check_admin_role(request):
    auth_header = request.headers.get('Authorization')

    if not auth_header or not auth_header.startswith('Bearer '):
        return Response({'errCode': 1, 'message': 'Unauthorized'}, status=status.HTTP_401_UNAUTHORIZED)

    token = auth_header.split(' ')[1]

    try:
        # Gi·∫£i m√£ token
        decoded = jwt.decode(token, settings.SECRET_KEY, algorithms=['HS256'])
        user_id = decoded.get('user_id')  # L·∫•y id t·ª´ payload token

        if not user_id:
            return Response({'errCode': 1, 'message': 'Invalid token'}, status=status.HTTP_400_BAD_REQUEST)

        user = User.objects.filter(id=user_id).first()

        if not user:
            return Response({'errCode': 1, 'message': 'User not found'}, status=status.HTTP_404_NOT_FOUND)

        if user.role == 'admin':
            return Response({'errCode': 0, 'message': 'User is admin'}, status=status.HTTP_200_OK)
        else:
            return Response({'errCode': 1, 'message': 'User is not admin'}, status=status.HTTP_403_FORBIDDEN)

    except jwt.ExpiredSignatureError:
        return Response({'errCode': 1, 'message': 'Token expired'}, status=status.HTTP_401_UNAUTHORIZED)
    except jwt.InvalidTokenError:
        return Response({'errCode': 1, 'message': 'Invalid token'}, status=status.HTTP_401_UNAUTHORIZED)

@api_view(['GET'])
def check_nurse_role(request):
    auth_header = request.headers.get('Authorization')

    if not auth_header or not auth_header.startswith('Bearer '):
        return Response({'errCode': 1, 'message': 'Unauthorized'}, status=status.HTTP_401_UNAUTHORIZED)

    token = auth_header.split(' ')[1]

    try:
        # Gi·∫£i m√£ token
        decoded = jwt.decode(token, settings.SECRET_KEY, algorithms=['HS256'])
        user_id = decoded.get('user_id')  # L·∫•y user_id t·ª´ payload token

        if not user_id:
            return Response({'errCode': 1, 'message': 'Invalid token'}, status=status.HTTP_400_BAD_REQUEST)

        user = User.objects.filter(id=user_id).first()

        if not user:
            return Response({'errCode': 1, 'message': 'User not found'}, status=status.HTTP_404_NOT_FOUND)

        if user.role == 'nurse':
            return Response({
                'errCode': 0,
                'message': 'User is nurse',
                'user_id': user_id  # Tr·∫£ v·ªÅ user_id sau khi gi·∫£i m√£
            }, status=status.HTTP_200_OK)
        else:
            return Response({'errCode': 1, 'message': 'User is not nurse'}, status=status.HTTP_403_FORBIDDEN)

    except jwt.ExpiredSignatureError:
        return Response({'errCode': 1, 'message': 'Token expired'}, status=status.HTTP_401_UNAUTHORIZED)
    except jwt.InvalidTokenError:
        return Response({'errCode': 1, 'message': 'Invalid token'}, status=status.HTTP_401_UNAUTHORIZED)

@api_view(['GET'])
@permission_classes([IsAuthenticated])
def check_cashier_role(request):
    try:
        user = request.user  # Ng∆∞·ªùi d√πng ƒë√£ x√°c th·ª±c t·ª´ request

        if user.role != 'cashier':  # Ki·ªÉm tra vai tr√≤ ng∆∞·ªùi d√πng
            return JsonResponse({
                'errCode': 1,
                'message': 'User is not cashier'
            }, status=status.HTTP_403_FORBIDDEN)

        # N·∫øu ng∆∞·ªùi d√πng c√≥ vai tr√≤ l√† cashier
        return JsonResponse({
            'errCode': 0,
            'message': 'User is cashier',
            'user_id': user.id  # Tr·∫£ v·ªÅ user_id
        })

    except Exception as e:
        return JsonResponse({
            'errCode': 2,
            'message': 'L·ªói h·ªá th·ªëng',
            'error': str(e)
        }, status=status.HTTP_500_INTERNAL_SERVER_ERROR)    



@api_view(['GET'])
@permission_classes([IsAuthenticated])
def check_technician_role(request):
    try:
        user = request.user  # Ng∆∞·ªùi d√πng ƒë√£ x√°c th·ª±c t·ª´ request

        if user.role != 'technician':  # Ki·ªÉm tra vai tr√≤ ng∆∞·ªùi d√πng
            return JsonResponse({
                'errCode': 1,
                'message': 'User is not cashier'
            }, status=status.HTTP_403_FORBIDDEN)

        # N·∫øu ng∆∞·ªùi d√πng c√≥ vai tr√≤ l√† technician
        return JsonResponse({
            'errCode': 0,
            'message': 'User is technician',
            'user_id': user.id  # Tr·∫£ v·ªÅ user_id
        })

    except Exception as e:
        return JsonResponse({
            'errCode': 2,
            'message': 'L·ªói h·ªá th·ªëng',
            'error': str(e)
        }, status=status.HTTP_500_INTERNAL_SERVER_ERROR)   
        
@api_view(['GET'])
@permission_classes([IsAuthenticated])
def check_pharmacist_role(request):
    try:
        user = request.user  # Ng∆∞·ªùi d√πng ƒë√£ x√°c th·ª±c t·ª´ request

        if user.role != 'pharmacist':  # Ki·ªÉm tra vai tr√≤ ng∆∞·ªùi d√πng
            return JsonResponse({
                'errCode': 1,
                'message': 'User is not pharmacist'
            }, status=status.HTTP_403_FORBIDDEN)

        # N·∫øu ng∆∞·ªùi d√πng c√≥ vai tr√≤ l√† pharmacist
        return JsonResponse({
            'errCode': 0,
            'message': 'User is pharmacist',
            'user_id': user.id  # Tr·∫£ v·ªÅ user_id
        })

    except Exception as e:
        return JsonResponse({
            'errCode': 2,
            'message': 'L·ªói h·ªá th·ªëng',
            'error': str(e)
        }, status=status.HTTP_500_INTERNAL_SERVER_ERROR)    

@api_view(['GET'])
def check_doctor_role(request):
    auth_header = request.headers.get('Authorization')

    if not auth_header or not auth_header.startswith('Bearer '):
        return Response({'errCode': 1, 'message': 'Unauthorized'}, status=status.HTTP_401_UNAUTHORIZED)

    token = auth_header.split(' ')[1]

    try:
        # Gi·∫£i m√£ token
        decoded = jwt.decode(token, settings.SECRET_KEY, algorithms=['HS256'])
        user_id = decoded.get('user_id')  # L·∫•y user_id t·ª´ payload token

        if not user_id:
            return Response({'errCode': 1, 'message': 'Invalid token'}, status=status.HTTP_400_BAD_REQUEST)

        user = User.objects.filter(id=user_id).first()

        if not user:
            return Response({'errCode': 1, 'message': 'User not found'}, status=status.HTTP_404_NOT_FOUND)

        if user.role == 'doctor':
            return Response({
                'errCode': 0,
                'message': 'User is doctor',
                'user_id': user_id  # Tr·∫£ v·ªÅ user_id sau khi gi·∫£i m√£
            }, status=status.HTTP_200_OK)
        else:
            return Response({'errCode': 1, 'message': 'User is not nurse'}, status=status.HTTP_403_FORBIDDEN)

    except jwt.ExpiredSignatureError:
        return Response({'errCode': 1, 'message': 'Token expired'}, status=status.HTTP_401_UNAUTHORIZED)
    except jwt.InvalidTokenError:
        return Response({'errCode': 1, 'message': 'Invalid token'}, status=status.HTTP_401_UNAUTHORIZED)


@api_view(['POST'])
@transaction.atomic
def create_doctor(request):
    try:
        # üìå L·∫•y token t·ª´ header
        auth_header = request.headers.get('Authorization')
        if not auth_header or not auth_header.startswith("Bearer "):
            return Response({"errCode": 3, "message": "Thi·∫øu ho·∫∑c sai ƒë·ªãnh d·∫°ng token"}, status=status.HTTP_401_UNAUTHORIZED)

        token = auth_header.split(" ")[1]

        try:
            decoded = jwt.decode(token, settings.SECRET_KEY, algorithms=["HS256"])
            user_id = decoded.get('user_id')
            if not user_id:
                return Response({"errCode": 7, "message": "Token kh√¥ng ch·ª©a user_id"}, status=status.HTTP_401_UNAUTHORIZED)

            User = get_user_model()
            user = User.objects.get(id=user_id)

            if user.role != 'admin':
                return Response({"errCode": 4, "message": "B·∫°n kh√¥ng c√≥ quy·ªÅn t·∫°o b√°c sƒ©"}, status=status.HTTP_403_FORBIDDEN)

        except jwt.ExpiredSignatureError:
            return Response({"errCode": 5, "message": "Token ƒë√£ h·∫øt h·∫°n"}, status=status.HTTP_401_UNAUTHORIZED)
        except jwt.InvalidTokenError:
            return Response({"errCode": 6, "message": "Token kh√¥ng h·ª£p l·ªá"}, status=status.HTTP_401_UNAUTHORIZED)
        except User.DoesNotExist:
            return Response({"errCode": 8, "message": "Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i"}, status=status.HTTP_404_NOT_FOUND)

        data = request.data.copy()

        # üìå Ki·ªÉm tra email ƒë√£ t·ªìn t·∫°i ch∆∞a
        if User.objects.filter(email=data.get("email")).exists():
            return Response({"errCode": 9, "message": "Email ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng"}, status=status.HTTP_400_BAD_REQUEST)

        # üìå X·ª≠ l√Ω ·∫£nh base64
        image_base64 = data.get("image")
        if not image_base64 or image_base64.strip() == "":
            return Response({
                "errCode": 10,
                "message": "·∫¢nh kh√¥ng h·ª£p l·ªá ho·∫∑c kh√¥ng c√≥ ·∫£nh"
            }, status=status.HTTP_400_BAD_REQUEST)

        try:
            if "base64," in image_base64:
                format_info, imgstr = image_base64.split(";base64,")
                mime_type = format_info.split(":")[-1].lower()  # v√≠ d·ª•: image/png
                ext = mimetypes.guess_extension(mime_type) or '.jpg'
                ext = ext.lstrip('.')  # b·ªè d·∫•u ch·∫•m
            else:
                imgstr = image_base64
                ext = "jpg"  # fallback

            if ext not in ['png', 'jpg', 'jpeg', 'webp', 'gif']:
                return Response({
                    "errCode": 11,
                    "message": f"ƒê·ªãnh d·∫°ng ·∫£nh kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£: {ext}"
                }, status=status.HTTP_400_BAD_REQUEST)

            timestamp = int(time.time())
            unique_id = uuid.uuid4().hex[:8]
            file_name = f"{timestamp}-{unique_id}.{ext}"

            os.makedirs(IMAGE_DOCTOR, exist_ok=True)
            image_path = os.path.join(IMAGE_DOCTOR, file_name)
            with open(image_path, "wb") as f:
                f.write(base64.b64decode(imgstr))

            data["image"] = file_name  # l∆∞u t√™n file v√†o DB

        except Exception as e:
            return Response({
                "errCode": 12,
                "message": "L·ªói x·ª≠ l√Ω ·∫£nh base64",
                "error": str(e)
            }, status=status.HTTP_400_BAD_REQUEST)

        # üìå T·∫°o user m·ªõi cho b√°c sƒ©
        new_user = User.objects.create_user(
            email=data.get("email"),
            password=data.get("password"),
            role="doctor"
        )
        data["user"] = new_user.id

        # üìå T·∫°o b√°c sƒ©
        serializer = DoctorSerializer(data=data)
        if serializer.is_valid():
            serializer.save()
            return Response({
                "errCode": 0,
                "message": "T·∫°o b√°c sƒ© th√†nh c√¥ng",
                "data": serializer.data
            }, status=status.HTTP_201_CREATED)

        # ‚ö†Ô∏è N·∫øu l·ªói th√¨ rollback user ƒë√£ t·∫°o
        new_user.delete()
        return Response({
            "errCode": 1,
            "message": "L·ªói d·ªØ li·ªáu ƒë·∫ßu v√†o",
            "errors": serializer.errors
        }, status=status.HTTP_400_BAD_REQUEST)

    except Exception as e:
        return Response({
            "errCode": 2,
            "message": "L·ªói h·ªá th·ªëng",
            "error": str(e)
        }, status=status.HTTP_500_INTERNAL_SERVER_ERROR)

    except Exception as e:
        logger.error(f"L·ªói t·∫°o b√°c sƒ©: {e}")
        return Response({
            "errCode": 2,
            "message": "L·ªói h·ªá th·ªëng",
            "error": str(e)
        }, status=status.HTTP_500_INTERNAL_SERVER_ERROR)



@api_view(['GET'])
@permission_classes([AllowAny])
def get_all_doctor_with_user_status(request):
    try:
        doctors = Doctor.objects.select_related('user').all()
        
        doctor_list = []
        for doc in doctors:
            doctor_list.append({
                "id": doc.id,
                "name": doc.name,
                "date_of_birth": doc.date_of_birth,
                "user_id": doc.user.id,
                "degree": doc.degree,
                "user": {
                    "is_active": doc.user.is_active
                }
            })

        return Response({
            "errCode": 0,
            "message": "L·∫•y danh s√°ch b√°c sƒ© th√†nh c√¥ng",
            "method": request.method,
            "data": doctor_list
        }, status=200)

    except Exception as e:
        return Response({
            "errCode": 2,
            "message": "L·ªói h·ªá th·ªëng",
            "method": request.method,
            "error": str(e),
            "data": []
        }, status=500)



@api_view(['PUT'])
@transaction.atomic
def change_active_user(request):
    try:
        # üìå L·∫•y token t·ª´ header
        auth_header = request.headers.get('Authorization')
        if not auth_header or not auth_header.startswith("Bearer "):
            return Response({"errCode": 3, "message": "Thi·∫øu ho·∫∑c sai ƒë·ªãnh d·∫°ng token"}, status=status.HTTP_401_UNAUTHORIZED)

        token = auth_header.split(" ")[1]

        try:
            decoded = jwt.decode(token, settings.SECRET_KEY, algorithms=["HS256"])
            user_id = decoded.get('user_id')
            if not user_id:
                return Response({"errCode": 7, "message": "Token kh√¥ng ch·ª©a user_id"}, status=status.HTTP_401_UNAUTHORIZED)

            User = get_user_model()
            admin_user = User.objects.get(id=user_id)

            if admin_user.role != 'admin':
                return Response({"errCode": 4, "message": "B·∫°n kh√¥ng c√≥ quy·ªÅn thay ƒë·ªïi tr·∫°ng th√°i ng∆∞·ªùi d√πng"}, status=status.HTTP_403_FORBIDDEN)

        except jwt.ExpiredSignatureError:
            return Response({"errCode": 5, "message": "Token ƒë√£ h·∫øt h·∫°n"}, status=status.HTTP_401_UNAUTHORIZED)
        except jwt.InvalidTokenError:
            return Response({"errCode": 6, "message": "Token kh√¥ng h·ª£p l·ªá"}, status=status.HTTP_401_UNAUTHORIZED)
        except User.DoesNotExist:
            return Response({"errCode": 8, "message": "Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i"}, status=status.HTTP_404_NOT_FOUND)

        # üìå X·ª≠ l√Ω thay ƒë·ªïi tr·∫°ng th√°i ng∆∞·ªùi d√πng
        target_id = request.data.get('id')
        if not target_id:
            return Response({"errCode": 9, "message": "Thi·∫øu ID ng∆∞·ªùi d√πng c·∫ßn thay ƒë·ªïi"}, status=status.HTTP_400_BAD_REQUEST)

        try:
            target_user = User.objects.get(id=target_id)
            target_user.is_active = not target_user.is_active
            target_user.save()

            return Response({
                "errCode": 0,
                "message": f"Tr·∫°ng th√°i ho·∫°t ƒë·ªông ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t th√†nh {'ho·∫°t ƒë·ªông' if target_user.is_active else 'kh√¥ng ho·∫°t ƒë·ªông'}"
            }, status=status.HTTP_200_OK)
        except User.DoesNotExist:
            return Response({"errCode": 10, "message": "Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i"}, status=status.HTTP_404_NOT_FOUND)

    except Exception as e:
        logger.error(f"L·ªói s·ª≠a tr·∫°ng th√°i: {e}")
        return Response({
            "errCode": 2,
            "message": "L·ªói h·ªá th·ªëng",
            "error": str(e)
        }, status=status.HTTP_500_INTERNAL_SERVER_ERROR)
        
        
@api_view(['GET'])
@permission_classes([AllowAny])
def get_doctor(request):
    try:
        doctor_id = request.GET.get('id')
        if not doctor_id:
            return Response({
                "errCode": 3,
                "message": "Thi·∫øu ID b√°c sƒ©"
            }, status=400)

        doctor = Doctor.objects.get(id=doctor_id)

        data = model_to_dict(doctor)

        # ƒê·ªçc ·∫£nh v√† chuy·ªÉn sang base64 ƒë·ªãnh d·∫°ng chu·∫©n
        data['image_name']=doctor.image
        image_base64 = ""
        if doctor.image:
            image_path = os.path.join(IMAGE_DOCTOR, doctor.image)
            if os.path.exists(image_path):
                mime_type, _ = mimetypes.guess_type(image_path)
                if mime_type:
                    with open(image_path, 'rb') as img_file:
                        encoded = base64.b64encode(img_file.read()).decode('utf-8')
                        image_base64 = f"data:{mime_type};base64,{encoded}"

        data['image'] = image_base64

        return Response({
            "errCode": 0,
            "message": "L·∫•y b√°c sƒ© th√†nh c√¥ng",
            "method": request.method,
            "data": data
        }, status=200)

    except Doctor.DoesNotExist:
        return Response({
            "errCode": 1,
            "message": "Kh√¥ng t√¨m th·∫•y b√°c sƒ©",
            "data": {}
        }, status=404)

    except Exception as e:
        return Response({
            "errCode": 2,
            "message": "L·ªói h·ªá th·ªëng",
            "method": request.method,
            "error": str(e),
            "data": {}
        }, status=500)
        
@api_view(['PUT'])
@transaction.atomic
def update_doctor(request):
    try:
        auth_header = request.headers.get('Authorization')
        if not auth_header or not auth_header.startswith("Bearer "):
            return Response({"errCode": 3, "message": "Thi·∫øu ho·∫∑c sai ƒë·ªãnh d·∫°ng token"}, status=status.HTTP_401_UNAUTHORIZED)

        token = auth_header.split(" ")[1]
        decoded = jwt.decode(token, settings.SECRET_KEY, algorithms=["HS256"])
        user_id = decoded.get('user_id')

        User = get_user_model()
        user = User.objects.get(id=user_id)

        if user.role != 'admin':
            return Response({"errCode": 4, "message": "B·∫°n kh√¥ng c√≥ quy·ªÅn c·∫≠p nh·∫≠t b√°c sƒ©"}, status=status.HTTP_403_FORBIDDEN)

        data = request.data.copy()
        doctor_id = data.get("id")
        if not doctor_id:
            return Response({"errCode": 5, "message": "Thi·∫øu id b√°c sƒ©"}, status=status.HTTP_400_BAD_REQUEST)

        doctor = Doctor.objects.filter(id=doctor_id).first()
        if not doctor:
            return Response({"errCode": 6, "message": "Kh√¥ng t√¨m th·∫•y b√°c sƒ©"}, status=status.HTTP_404_NOT_FOUND)

        # ‚úÖ Xo√° ·∫£nh c≈©
        old_image_name = data.get("image_name")
        if old_image_name:
            old_path = os.path.join(IMAGE_DOCTOR, old_image_name)
            if os.path.exists(old_path):
                os.remove(old_path)

        # ‚úÖ X·ª≠ l√Ω ·∫£nh m·ªõi
        image_base64 = data.get("image")
        if image_base64 and image_base64.strip() != "":
            try:
                if "base64," in image_base64:
                    format_info, imgstr = image_base64.split(";base64,")
                    mime_type = format_info.split(":")[-1].lower()
                    ext = mimetypes.guess_extension(mime_type) or '.jpg'
                    ext = ext.lstrip('.')
                else:
                    imgstr = image_base64
                    ext = "jpg"

                if ext not in ['png', 'jpg', 'jpeg', 'webp', 'gif']:
                    return Response({
                        "errCode": 11,
                        "message": f"ƒê·ªãnh d·∫°ng ·∫£nh kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£: {ext}"
                    }, status=status.HTTP_400_BAD_REQUEST)

                timestamp = int(time.time())
                unique_id = uuid.uuid4().hex[:8]
                file_name = f"{timestamp}-{unique_id}.{ext}"

                os.makedirs(IMAGE_DOCTOR, exist_ok=True)
                image_path = os.path.join(IMAGE_DOCTOR, file_name)
                with open(image_path, "wb") as f:
                    f.write(base64.b64decode(imgstr))

                data["image"] = file_name  # c·∫≠p nh·∫≠t ·∫£nh m·ªõi v√†o DB
            except Exception as e:
                return Response({
                    "errCode": 12,
                    "message": "L·ªói x·ª≠ l√Ω ·∫£nh base64",
                    "error": str(e)
                }, status=status.HTTP_400_BAD_REQUEST)

        # ‚úÖ C·∫≠p nh·∫≠t b√°c sƒ©
        serializer = DoctorSerializer(doctor, data=data, partial=True)
        if serializer.is_valid():
            serializer.save()
            return Response({
                "errCode": 0,
                "message": "C·∫≠p nh·∫≠t b√°c sƒ© th√†nh c√¥ng",
                "data": serializer.data
            }, status=status.HTTP_200_OK)

        return Response({
            "errCode": 2,
            "message": "L·ªói d·ªØ li·ªáu ƒë·∫ßu v√†o",
            "errors": serializer.errors
        }, status=status.HTTP_400_BAD_REQUEST)

    except jwt.ExpiredSignatureError:
        return Response({"errCode": 5, "message": "Token ƒë√£ h·∫øt h·∫°n"}, status=status.HTTP_401_UNAUTHORIZED)
    except jwt.InvalidTokenError:
        return Response({"errCode": 6, "message": "Token kh√¥ng h·ª£p l·ªá"}, status=status.HTTP_401_UNAUTHORIZED)
    except Exception as e:
        return Response({
            "errCode": 99,
            "message": "L·ªói kh√¥ng x√°c ƒë·ªãnh",
            "error": str(e)
        }, status=status.HTTP_500_INTERNAL_SERVER_ERROR)
        

@api_view(['POST'])
@transaction.atomic
def create_nurse(request):
    try:
        # üìå L·∫•y token t·ª´ header
        auth_header = request.headers.get('Authorization')
        if not auth_header or not auth_header.startswith("Bearer "):
            return Response({"errCode": 3, "message": "Thi·∫øu ho·∫∑c sai ƒë·ªãnh d·∫°ng token"}, status=status.HTTP_401_UNAUTHORIZED)

        token = auth_header.split(" ")[1]

        try:
            decoded = jwt.decode(token, settings.SECRET_KEY, algorithms=["HS256"])
            user_id = decoded.get('user_id')
            if not user_id:
                return Response({"errCode": 7, "message": "Token kh√¥ng ch·ª©a user_id"}, status=status.HTTP_401_UNAUTHORIZED)

            User = get_user_model()
            user = User.objects.get(id=user_id)

            if user.role != 'admin':
                return Response({"errCode": 4, "message": "B·∫°n kh√¥ng c√≥ quy·ªÅn t·∫°o b√°c sƒ©"}, status=status.HTTP_403_FORBIDDEN)

        except jwt.ExpiredSignatureError:
            return Response({"errCode": 5, "message": "Token ƒë√£ h·∫øt h·∫°n"}, status=status.HTTP_401_UNAUTHORIZED)
        except jwt.InvalidTokenError:
            return Response({"errCode": 6, "message": "Token kh√¥ng h·ª£p l·ªá"}, status=status.HTTP_401_UNAUTHORIZED)
        except User.DoesNotExist:
            return Response({"errCode": 8, "message": "Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i"}, status=status.HTTP_404_NOT_FOUND)

        data = request.data.copy()

        # üìå Ki·ªÉm tra email ƒë√£ t·ªìn t·∫°i ch∆∞a
        if User.objects.filter(email=data.get("email")).exists():
            return Response({"errCode": 9, "message": "Email ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng"}, status=status.HTTP_400_BAD_REQUEST)

        # üìå X·ª≠ l√Ω ·∫£nh base64
        image_base64 = data.get("image")
        if not image_base64 or image_base64.strip() == "":
            return Response({
                "errCode": 10,
                "message": "·∫¢nh kh√¥ng h·ª£p l·ªá ho·∫∑c kh√¥ng c√≥ ·∫£nh"
            }, status=status.HTTP_400_BAD_REQUEST)

        try:
            if "base64," in image_base64:
                format_info, imgstr = image_base64.split(";base64,")
                mime_type = format_info.split(":")[-1].lower()  # v√≠ d·ª•: image/png
                ext = mimetypes.guess_extension(mime_type) or '.jpg'
                ext = ext.lstrip('.')  # b·ªè d·∫•u ch·∫•m
            else:
                imgstr = image_base64
                ext = "jpg"  # fallback

            if ext not in ['png', 'jpg', 'jpeg', 'webp', 'gif']:
                return Response({
                    "errCode": 11,
                    "message": f"ƒê·ªãnh d·∫°ng ·∫£nh kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£: {ext}"
                }, status=status.HTTP_400_BAD_REQUEST)

            timestamp = int(time.time())
            unique_id = uuid.uuid4().hex[:8]
            file_name = f"{timestamp}-{unique_id}.{ext}"

            os.makedirs(IMAGE_NURSE, exist_ok=True)
            image_path = os.path.join(IMAGE_NURSE, file_name)
            with open(image_path, "wb") as f:
                f.write(base64.b64decode(imgstr))

            data["image"] = file_name  # l∆∞u t√™n file v√†o DB

        except Exception as e:
            return Response({
                "errCode": 12,
                "message": "L·ªói x·ª≠ l√Ω ·∫£nh base64",
                "error": str(e)
            }, status=status.HTTP_400_BAD_REQUEST)

        # üìå T·∫°o user m·ªõi cho y t√°
        new_user = User.objects.create_user(
            email=data.get("email"),
            password=data.get("password"),
            role="nurse"
        )
        data["user"] = new_user.id

        # üìå T·∫°o b√°c sƒ©
        serializer = NurseSerializer(data=data)
        if serializer.is_valid():
            serializer.save()
            return Response({
                "errCode": 0,
                "message": "T·∫°o b√°c sƒ© th√†nh c√¥ng",
                "data": serializer.data
            }, status=status.HTTP_201_CREATED)

        # ‚ö†Ô∏è N·∫øu l·ªói th√¨ rollback user ƒë√£ t·∫°o
        new_user.delete()
        return Response({
            "errCode": 1,
            "message": "L·ªói d·ªØ li·ªáu ƒë·∫ßu v√†o",
            "errors": serializer.errors
        }, status=status.HTTP_400_BAD_REQUEST)

    except Exception as e:
        return Response({
            "errCode": 2,
            "message": "L·ªói h·ªá th·ªëng",
            "error": str(e)
        }, status=status.HTTP_500_INTERNAL_SERVER_ERROR)

    except Exception as e:
        logger.error(f"L·ªói t·∫°o y t√°: {e}")
        return Response({
            "errCode": 2,
            "message": "L·ªói h·ªá th·ªëng",
            "error": str(e)
        }, status=status.HTTP_500_INTERNAL_SERVER_ERROR)


@api_view(['GET'])
@permission_classes([AllowAny])
def get_all_nurse_with_user_status(request):
    try:
        nurses = Nurse.objects.select_related('user').all()
        
        nurse_list = []
        for nur in nurses:
            nurse_list.append({
                "id": nur.id,
                "name": nur.name,
                "date_of_birth": nur.date_of_birth,
                "user_id": nur.user.id,
                "phone":nur.phone,
                "user": {
                    "is_active": nur.user.is_active
                }
            })

        return Response({
            "errCode": 0,
            "message": "L·∫•y danh s√°ch b√°c sƒ© th√†nh c√¥ng",
            "method": request.method,
            "data": nurse_list
        }, status=200)

    except Exception as e:
        return Response({
            "errCode": 2,
            "message": "L·ªói h·ªá th·ªëng",
            "method": request.method,
            "error": str(e),
            "data": []
        }, status=500)
        
        
      
@api_view(['GET'])
@permission_classes([AllowAny])
def get_nurse(request):
    try:
        nurse_id = request.GET.get('id')
        if not nurse_id:
            return Response({
                "errCode": 3,
                "message": "Thi·∫øu ID y t√°"
            }, status=400)

        nurse = Nurse.objects.get(id=nurse_id)

        data = model_to_dict(nurse)

        # ƒê·ªçc ·∫£nh v√† chuy·ªÉn sang base64 ƒë·ªãnh d·∫°ng chu·∫©n
        data['image_name']=nurse.image
        image_base64 = ""
        if nurse.image:
            image_path = os.path.join(IMAGE_NURSE, nurse.image)
            if os.path.exists(image_path):
                mime_type, _ = mimetypes.guess_type(image_path)
                if mime_type:
                    with open(image_path, 'rb') as img_file:
                        encoded = base64.b64encode(img_file.read()).decode('utf-8')
                        image_base64 = f"data:{mime_type};base64,{encoded}"

        data['image'] = image_base64

        return Response({
            "errCode": 0,
            "message": "L·∫•y y t√° th√†nh c√¥ng",
            "method": request.method,
            "data": data
        }, status=200)

    except Nurse.DoesNotExist:
        return Response({
            "errCode": 1,
            "message": "Kh√¥ng t√¨m th·∫•y y t√°",
            "data": {}
        }, status=404)

    except Exception as e:
        return Response({
            "errCode": 2,
            "message": "L·ªói h·ªá th·ªëng",
            "method": request.method,
            "error": str(e),
            "data": {}
        }, status=500)
        
       
@api_view(['PUT'])
@transaction.atomic
def update_nurse(request):
    try:
        auth_header = request.headers.get('Authorization')
        if not auth_header or not auth_header.startswith("Bearer "):
            return Response({"errCode": 3, "message": "Thi·∫øu ho·∫∑c sai ƒë·ªãnh d·∫°ng token"}, status=status.HTTP_401_UNAUTHORIZED)

        token = auth_header.split(" ")[1]
        decoded = jwt.decode(token, settings.SECRET_KEY, algorithms=["HS256"])
        user_id = decoded.get('user_id')

        User = get_user_model()
        user = User.objects.get(id=user_id)

        if user.role != 'admin':
            return Response({"errCode": 4, "message": "B·∫°n kh√¥ng c√≥ quy·ªÅn c·∫≠p nh·∫≠t b√°c sƒ©"}, status=status.HTTP_403_FORBIDDEN)

        data = request.data.copy()
        nurse_id = data.get("id")
        if not nurse_id:
            return Response({"errCode": 5, "message": "Thi·∫øu id b√°c sƒ©"}, status=status.HTTP_400_BAD_REQUEST)

        nurse = Nurse.objects.filter(id=nurse_id).first()
        if not nurse:
            return Response({"errCode": 6, "message": "Kh√¥ng t√¨m th·∫•y b√°c sƒ©"}, status=status.HTTP_404_NOT_FOUND)

        # ‚úÖ Xo√° ·∫£nh c≈©
        old_image_name = data.get("image_name")
        if old_image_name:
            old_path = os.path.join(IMAGE_NURSE, old_image_name)
            if os.path.exists(old_path):
                os.remove(old_path)

        # ‚úÖ X·ª≠ l√Ω ·∫£nh m·ªõi
        image_base64 = data.get("image")
        if image_base64 and image_base64.strip() != "":
            try:
                if "base64," in image_base64:
                    format_info, imgstr = image_base64.split(";base64,")
                    mime_type = format_info.split(":")[-1].lower()
                    ext = mimetypes.guess_extension(mime_type) or '.jpg'
                    ext = ext.lstrip('.')
                else:
                    imgstr = image_base64
                    ext = "jpg"

                if ext not in ['png', 'jpg', 'jpeg', 'webp', 'gif']:
                    return Response({
                        "errCode": 11,
                        "message": f"ƒê·ªãnh d·∫°ng ·∫£nh kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£: {ext}"
                    }, status=status.HTTP_400_BAD_REQUEST)

                timestamp = int(time.time())
                unique_id = uuid.uuid4().hex[:8]
                file_name = f"{timestamp}-{unique_id}.{ext}"

                os.makedirs(IMAGE_NURSE, exist_ok=True)
                image_path = os.path.join(IMAGE_NURSE, file_name)
                with open(image_path, "wb") as f:
                    f.write(base64.b64decode(imgstr))

                data["image"] = file_name  # c·∫≠p nh·∫≠t ·∫£nh m·ªõi v√†o DB
            except Exception as e:
                return Response({
                    "errCode": 12,
                    "message": "L·ªói x·ª≠ l√Ω ·∫£nh base64",
                    "error": str(e)
                }, status=status.HTTP_400_BAD_REQUEST)

        # ‚úÖ C·∫≠p nh·∫≠t b√°c sƒ©
        serializer = NurseSerializer(nurse, data=data, partial=True)
        if serializer.is_valid():
            serializer.save()
            return Response({
                "errCode": 0,
                "message": "C·∫≠p nh·∫≠t y t√° th√†nh c√¥ng",
                "data": serializer.data
            }, status=status.HTTP_200_OK)

        return Response({
            "errCode": 2,
            "message": "L·ªói d·ªØ li·ªáu ƒë·∫ßu v√†o",
            "errors": serializer.errors
        }, status=status.HTTP_400_BAD_REQUEST)

    except jwt.ExpiredSignatureError:
        return Response({"errCode": 5, "message": "Token ƒë√£ h·∫øt h·∫°n"}, status=status.HTTP_401_UNAUTHORIZED)
    except jwt.InvalidTokenError:
        return Response({"errCode": 6, "message": "Token kh√¥ng h·ª£p l·ªá"}, status=status.HTTP_401_UNAUTHORIZED)
    except Exception as e:
        return Response({
            "errCode": 99,
            "message": "L·ªói kh√¥ng x√°c ƒë·ªãnh",
            "error": str(e)
        }, status=status.HTTP_500_INTERNAL_SERVER_ERROR)
        
      

@api_view(['POST'])
@transaction.atomic
def create_technician(request):
    try:
        # üìå L·∫•y token t·ª´ header
        auth_header = request.headers.get('Authorization')
        if not auth_header or not auth_header.startswith("Bearer "):
            return Response({"errCode": 3, "message": "Thi·∫øu ho·∫∑c sai ƒë·ªãnh d·∫°ng token"}, status=status.HTTP_401_UNAUTHORIZED)

        token = auth_header.split(" ")[1]

        try:
            decoded = jwt.decode(token, settings.SECRET_KEY, algorithms=["HS256"])
            user_id = decoded.get('user_id')
            if not user_id:
                return Response({"errCode": 7, "message": "Token kh√¥ng ch·ª©a user_id"}, status=status.HTTP_401_UNAUTHORIZED)

            User = get_user_model()
            user = User.objects.get(id=user_id)

            if user.role != 'admin':
                return Response({"errCode": 4, "message": "B·∫°n kh√¥ng c√≥ quy·ªÅn t·∫°o b√°c sƒ©"}, status=status.HTTP_403_FORBIDDEN)

        except jwt.ExpiredSignatureError:
            return Response({"errCode": 5, "message": "Token ƒë√£ h·∫øt h·∫°n"}, status=status.HTTP_401_UNAUTHORIZED)
        except jwt.InvalidTokenError:
            return Response({"errCode": 6, "message": "Token kh√¥ng h·ª£p l·ªá"}, status=status.HTTP_401_UNAUTHORIZED)
        except User.DoesNotExist:
            return Response({"errCode": 8, "message": "Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i"}, status=status.HTTP_404_NOT_FOUND)

        data = request.data.copy()

        # üìå Ki·ªÉm tra email ƒë√£ t·ªìn t·∫°i ch∆∞a
        if User.objects.filter(email=data.get("email")).exists():
            return Response({"errCode": 9, "message": "Email ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng"}, status=status.HTTP_400_BAD_REQUEST)

        # üìå X·ª≠ l√Ω ·∫£nh base64
        image_base64 = data.get("image")
        if not image_base64 or image_base64.strip() == "":
            return Response({
                "errCode": 10,
                "message": "·∫¢nh kh√¥ng h·ª£p l·ªá ho·∫∑c kh√¥ng c√≥ ·∫£nh"
            }, status=status.HTTP_400_BAD_REQUEST)

        try:
            if "base64," in image_base64:
                format_info, imgstr = image_base64.split(";base64,")
                mime_type = format_info.split(":")[-1].lower()  # v√≠ d·ª•: image/png
                ext = mimetypes.guess_extension(mime_type) or '.jpg'
                ext = ext.lstrip('.')  # b·ªè d·∫•u ch·∫•m
            else:
                imgstr = image_base64
                ext = "jpg"  # fallback

            if ext not in ['png', 'jpg', 'jpeg', 'webp', 'gif']:
                return Response({
                    "errCode": 11,
                    "message": f"ƒê·ªãnh d·∫°ng ·∫£nh kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£: {ext}"
                }, status=status.HTTP_400_BAD_REQUEST)

            timestamp = int(time.time())
            unique_id = uuid.uuid4().hex[:8]
            file_name = f"{timestamp}-{unique_id}.{ext}"

            os.makedirs(IMAGE_TECH, exist_ok=True)
            image_path = os.path.join(IMAGE_TECH, file_name)
            with open(image_path, "wb") as f:
                f.write(base64.b64decode(imgstr))

            data["image"] = file_name  # l∆∞u t√™n file v√†o DB

        except Exception as e:
            return Response({
                "errCode": 12,
                "message": "L·ªói x·ª≠ l√Ω ·∫£nh base64",
                "error": str(e)
            }, status=status.HTTP_400_BAD_REQUEST)

        # üìå T·∫°o user m·ªõi cho y t√°
        new_user = User.objects.create_user(
            email=data.get("email"),
            password=data.get("password"),
            role="technician"
        )
        data["user"] = new_user.id

        # üìå T·∫°o b√°c sƒ©
        serializer = TechnicianSerializer(data=data)
        if serializer.is_valid():
            serializer.save()
            return Response({
                "errCode": 0,
                "message": "T·∫°o Kƒ© thu·∫≠t vi√™n th√†nh c√¥ng",
                "data": serializer.data
            }, status=status.HTTP_201_CREATED)

        # ‚ö†Ô∏è N·∫øu l·ªói th√¨ rollback user ƒë√£ t·∫°o
        new_user.delete()
        return Response({
            "errCode": 1,
            "message": "L·ªói d·ªØ li·ªáu ƒë·∫ßu v√†o",
            "errors": serializer.errors
        }, status=status.HTTP_400_BAD_REQUEST)

    except Exception as e:
        return Response({
            "errCode": 2,
            "message": "L·ªói h·ªá th·ªëng",
            "error": str(e)
        }, status=status.HTTP_500_INTERNAL_SERVER_ERROR)

    except Exception as e:
        logger.error(f"L·ªói t·∫°o kƒ© thu·∫≠t vi√™n: {e}")
        return Response({
            "errCode": 2,
            "message": "L·ªói h·ªá th·ªëng",
            "error": str(e)
        }, status=status.HTTP_500_INTERNAL_SERVER_ERROR)


@api_view(['GET'])
@permission_classes([AllowAny])
def get_all_technician_with_user_status(request):
    try:
        technicians = Technician.objects.select_related('user').all()
        
        technician_list = []
        for tec in technicians:
            technician_list.append({
                "id": tec.id,
                "name": tec.name,
                "date_of_birth": tec.date_of_birth,
                "user_id": tec.user.id,
                "phone":tec.phone,
                "user": {
                    "is_active": tec.user.is_active
                }
            })

        return Response({
            "errCode": 0,
            "message": "L·∫•y danh s√°ch kƒ© thu·∫≠t vi√™n th√†nh c√¥ng",
            "method": request.method,
            "data": technician_list
        }, status=200)

    except Exception as e:
        return Response({
            "errCode": 2,
            "message": "L·ªói h·ªá th·ªëng",
            "method": request.method,
            "error": str(e),
            "data": []
        }, status=500)
        
        
      
@api_view(['GET'])
@permission_classes([AllowAny])
def get_technician(request):
    try:
        technician_id = request.GET.get('id')
        if not technician_id:
            return Response({
                "errCode": 3,
                "message": "Thi·∫øu ID y t√°"
            }, status=400)

        technician = Technician.objects.get(id=technician_id)

        data = model_to_dict(technician)

        # ƒê·ªçc ·∫£nh v√† chuy·ªÉn sang base64 ƒë·ªãnh d·∫°ng chu·∫©n
        data['image_name']=technician.image
        image_base64 = ""
        if technician.image:
            image_path = os.path.join(IMAGE_TECH, technician.image)
            if os.path.exists(image_path):
                mime_type, _ = mimetypes.guess_type(image_path)
                if mime_type:
                    with open(image_path, 'rb') as img_file:
                        encoded = base64.b64encode(img_file.read()).decode('utf-8')
                        image_base64 = f"data:{mime_type};base64,{encoded}"

        data['image'] = image_base64

        return Response({
            "errCode": 0,
            "message": "L·∫•y y t√° th√†nh c√¥ng",
            "method": request.method,
            "data": data
        }, status=200)

    except Technician.DoesNotExist:
        return Response({
            "errCode": 1,
            "message": "Kh√¥ng t√¨m th·∫•y kƒ© thu·∫≠t vi√™n",
            "data": {}
        }, status=404)

    except Exception as e:
        return Response({
            "errCode": 2,
            "message": "L·ªói h·ªá th·ªëng",
            "method": request.method,
            "error": str(e),
            "data": {}
        }, status=500)
        
       
@api_view(['PUT'])
@transaction.atomic
def update_technician(request):
    try:
        auth_header = request.headers.get('Authorization')
        if not auth_header or not auth_header.startswith("Bearer "):
            return Response({"errCode": 3, "message": "Thi·∫øu ho·∫∑c sai ƒë·ªãnh d·∫°ng token"}, status=status.HTTP_401_UNAUTHORIZED)

        token = auth_header.split(" ")[1]
        decoded = jwt.decode(token, settings.SECRET_KEY, algorithms=["HS256"])
        user_id = decoded.get('user_id')

        User = get_user_model()
        user = User.objects.get(id=user_id)

        if user.role != 'admin':
            return Response({"errCode": 4, "message": "B·∫°n kh√¥ng c√≥ quy·ªÅn c·∫≠p nh·∫≠t b√°c sƒ©"}, status=status.HTTP_403_FORBIDDEN)

        data = request.data.copy()
        technician_id = data.get("id")
        if not technician_id:
            return Response({"errCode": 5, "message": "Thi·∫øu id b√°c sƒ©"}, status=status.HTTP_400_BAD_REQUEST)

        technician = Technician.objects.filter(id=technician_id).first()
        if not technician:
            return Response({"errCode": 6, "message": "Kh√¥ng t√¨m th·∫•y b√°c sƒ©"}, status=status.HTTP_404_NOT_FOUND)

        # ‚úÖ Xo√° ·∫£nh c≈©
        old_image_name = data.get("image_name")
        if old_image_name:
            old_path = os.path.join(IMAGE_TECH, old_image_name)
            if os.path.exists(old_path):
                os.remove(old_path)

        # ‚úÖ X·ª≠ l√Ω ·∫£nh m·ªõi
        image_base64 = data.get("image")
        if image_base64 and image_base64.strip() != "":
            try:
                if "base64," in image_base64:
                    format_info, imgstr = image_base64.split(";base64,")
                    mime_type = format_info.split(":")[-1].lower()
                    ext = mimetypes.guess_extension(mime_type) or '.jpg'
                    ext = ext.lstrip('.')
                else:
                    imgstr = image_base64
                    ext = "jpg"

                if ext not in ['png', 'jpg', 'jpeg', 'webp', 'gif']:
                    return Response({
                        "errCode": 11,
                        "message": f"ƒê·ªãnh d·∫°ng ·∫£nh kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£: {ext}"
                    }, status=status.HTTP_400_BAD_REQUEST)

                timestamp = int(time.time())
                unique_id = uuid.uuid4().hex[:8]
                file_name = f"{timestamp}-{unique_id}.{ext}"

                os.makedirs(IMAGE_TECH, exist_ok=True)
                image_path = os.path.join(IMAGE_TECH, file_name)
                with open(image_path, "wb") as f:
                    f.write(base64.b64decode(imgstr))

                data["image"] = file_name  # c·∫≠p nh·∫≠t ·∫£nh m·ªõi v√†o DB
            except Exception as e:
                return Response({
                    "errCode": 12,
                    "message": "L·ªói x·ª≠ l√Ω ·∫£nh base64",
                    "error": str(e)
                }, status=status.HTTP_400_BAD_REQUEST)

        # ‚úÖ C·∫≠p nh·∫≠t b√°c sƒ©
        serializer = TechnicianSerializer(technician, data=data, partial=True)
        if serializer.is_valid():
            serializer.save()
            return Response({
                "errCode": 0,
                "message": "C·∫≠p nh·∫≠t y t√° th√†nh c√¥ng",
                "data": serializer.data
            }, status=status.HTTP_200_OK)

        return Response({
            "errCode": 2,
            "message": "L·ªói d·ªØ li·ªáu ƒë·∫ßu v√†o",
            "errors": serializer.errors
        }, status=status.HTTP_400_BAD_REQUEST)

    except jwt.ExpiredSignatureError:
        return Response({"errCode": 5, "message": "Token ƒë√£ h·∫øt h·∫°n"}, status=status.HTTP_401_UNAUTHORIZED)
    except jwt.InvalidTokenError:
        return Response({"errCode": 6, "message": "Token kh√¥ng h·ª£p l·ªá"}, status=status.HTTP_401_UNAUTHORIZED)
    except Exception as e:
        return Response({
            "errCode": 99,
            "message": "L·ªói kh√¥ng x√°c ƒë·ªãnh",
            "error": str(e)
        }, status=status.HTTP_500_INTERNAL_SERVER_ERROR)
        
        

@api_view(['POST'])
@transaction.atomic
def create_pharmacist(request):
    try:
        # üìå L·∫•y token t·ª´ header
        auth_header = request.headers.get('Authorization')
        if not auth_header or not auth_header.startswith("Bearer "):
            return Response({"errCode": 3, "message": "Thi·∫øu ho·∫∑c sai ƒë·ªãnh d·∫°ng token"}, status=status.HTTP_401_UNAUTHORIZED)

        token = auth_header.split(" ")[1]

        try:
            decoded = jwt.decode(token, settings.SECRET_KEY, algorithms=["HS256"])
            user_id = decoded.get('user_id')
            if not user_id:
                return Response({"errCode": 7, "message": "Token kh√¥ng ch·ª©a user_id"}, status=status.HTTP_401_UNAUTHORIZED)

            User = get_user_model()
            user = User.objects.get(id=user_id)

            if user.role != 'admin':
                return Response({"errCode": 4, "message": "B·∫°n kh√¥ng c√≥ quy·ªÅn t·∫°o b√°c sƒ©"}, status=status.HTTP_403_FORBIDDEN)

        except jwt.ExpiredSignatureError:
            return Response({"errCode": 5, "message": "Token ƒë√£ h·∫øt h·∫°n"}, status=status.HTTP_401_UNAUTHORIZED)
        except jwt.InvalidTokenError:
            return Response({"errCode": 6, "message": "Token kh√¥ng h·ª£p l·ªá"}, status=status.HTTP_401_UNAUTHORIZED)
        except User.DoesNotExist:
            return Response({"errCode": 8, "message": "Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i"}, status=status.HTTP_404_NOT_FOUND)

        data = request.data.copy()

        # üìå Ki·ªÉm tra email ƒë√£ t·ªìn t·∫°i ch∆∞a
        if User.objects.filter(email=data.get("email")).exists():
            return Response({"errCode": 9, "message": "Email ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng"}, status=status.HTTP_400_BAD_REQUEST)

        # üìå X·ª≠ l√Ω ·∫£nh base64
        image_base64 = data.get("image")
        if not image_base64 or image_base64.strip() == "":
            return Response({
                "errCode": 10,
                "message": "·∫¢nh kh√¥ng h·ª£p l·ªá ho·∫∑c kh√¥ng c√≥ ·∫£nh"
            }, status=status.HTTP_400_BAD_REQUEST)

        try:
            if "base64," in image_base64:
                format_info, imgstr = image_base64.split(";base64,")
                mime_type = format_info.split(":")[-1].lower()  # v√≠ d·ª•: image/png
                ext = mimetypes.guess_extension(mime_type) or '.jpg'
                ext = ext.lstrip('.')  # b·ªè d·∫•u ch·∫•m
            else:
                imgstr = image_base64
                ext = "jpg"  # fallback

            if ext not in ['png', 'jpg', 'jpeg', 'webp', 'gif']:
                return Response({
                    "errCode": 11,
                    "message": f"ƒê·ªãnh d·∫°ng ·∫£nh kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£: {ext}"
                }, status=status.HTTP_400_BAD_REQUEST)

            timestamp = int(time.time())
            unique_id = uuid.uuid4().hex[:8]
            file_name = f"{timestamp}-{unique_id}.{ext}"

            os.makedirs(IMAGE_PHARMA, exist_ok=True)
            image_path = os.path.join(IMAGE_PHARMA, file_name)
            with open(image_path, "wb") as f:
                f.write(base64.b64decode(imgstr))

            data["image"] = file_name  # l∆∞u t√™n file v√†o DB

        except Exception as e:
            return Response({
                "errCode": 12,
                "message": "L·ªói x·ª≠ l√Ω ·∫£nh base64",
                "error": str(e)
            }, status=status.HTTP_400_BAD_REQUEST)

        # üìå T·∫°o user m·ªõi cho y t√°
        new_user = User.objects.create_user(
            email=data.get("email"),
            password=data.get("password"),
            role="pharmacist"
        )
        data["user"] = new_user.id

        # üìå T·∫°o b√°c sƒ©
        serializer = PharmacistSerializer(data=data)
        if serializer.is_valid():
            serializer.save()
            return Response({
                "errCode": 0,
                "message": "T·∫°o Kƒ© thu·∫≠t vi√™n th√†nh c√¥ng",
                "data": serializer.data
            }, status=status.HTTP_201_CREATED)

        # ‚ö†Ô∏è N·∫øu l·ªói th√¨ rollback user ƒë√£ t·∫°o
        new_user.delete()
        return Response({
            "errCode": 1,
            "message": "L·ªói d·ªØ li·ªáu ƒë·∫ßu v√†o",
            "errors": serializer.errors
        }, status=status.HTTP_400_BAD_REQUEST)

    except Exception as e:
        return Response({
            "errCode": 2,
            "message": "L·ªói h·ªá th·ªëng",
            "error": str(e)
        }, status=status.HTTP_500_INTERNAL_SERVER_ERROR)

    except Exception as e:
        logger.error(f"L·ªói t·∫°o kƒ© thu·∫≠t vi√™n: {e}")
        return Response({
            "errCode": 2,
            "message": "L·ªói h·ªá th·ªëng",
            "error": str(e)
        }, status=status.HTTP_500_INTERNAL_SERVER_ERROR)


@api_view(['GET'])
@permission_classes([AllowAny])
def get_all_pharmacist_with_user_status(request):
    try:
        phars = Pharmacist.objects.select_related('user').all()
        
        phar_list = []
        for ph in phars:
            phar_list.append({
                "id": ph.id,
                "name": ph.name,
                "date_of_birth": ph.date_of_birth,
                "user_id": ph.user.id,
                "phone":ph.phone,
                "user": {
                    "is_active": ph.user.is_active
                }
            })

        return Response({
            "errCode": 0,
            "message": "L·∫•y danh s√°ch kƒ© thu·∫≠t vi√™n th√†nh c√¥ng",
            "method": request.method,
            "data": phar_list
        }, status=200)

    except Exception as e:
        return Response({
            "errCode": 2,
            "message": "L·ªói h·ªá th·ªëng",
            "method": request.method,
            "error": str(e),
            "data": []
        }, status=500)
        
        
      
@api_view(['GET'])
@permission_classes([AllowAny])
def get_pharmacist(request):
    try:
        pharmacist_id = request.GET.get('id')
        if not pharmacist_id:
            return Response({
                "errCode": 3,
                "message": "Thi·∫øu ID y t√°"
            }, status=400)

        pharmacist = Pharmacist.objects.get(id=pharmacist_id)

        data = model_to_dict(pharmacist)

        # ƒê·ªçc ·∫£nh v√† chuy·ªÉn sang base64 ƒë·ªãnh d·∫°ng chu·∫©n
        data['image_name']=pharmacist.image
        image_base64 = ""
        if pharmacist.image:
            image_path = os.path.join(IMAGE_PHARMA, pharmacist.image)
            if os.path.exists(image_path):
                mime_type, _ = mimetypes.guess_type(image_path)
                if mime_type:
                    with open(image_path, 'rb') as img_file:
                        encoded = base64.b64encode(img_file.read()).decode('utf-8')
                        image_base64 = f"data:{mime_type};base64,{encoded}"

        data['image'] = image_base64

        return Response({
            "errCode": 0,
            "message": "L·∫•y y t√° th√†nh c√¥ng",
            "method": request.method,
            "data": data
        }, status=200)

    except Pharmacist.DoesNotExist:
        return Response({
            "errCode": 1,
            "message": "Kh√¥ng t√¨m th·∫•y kƒ© thu·∫≠t vi√™n",
            "data": {}
        }, status=404)

    except Exception as e:
        return Response({
            "errCode": 2,
            "message": "L·ªói h·ªá th·ªëng",
            "method": request.method,
            "error": str(e),
            "data": {}
        }, status=500)
        
       
@api_view(['PUT'])
@transaction.atomic
def update_pharmacist(request):
    try:
        auth_header = request.headers.get('Authorization')
        if not auth_header or not auth_header.startswith("Bearer "):
            return Response({"errCode": 3, "message": "Thi·∫øu ho·∫∑c sai ƒë·ªãnh d·∫°ng token"}, status=status.HTTP_401_UNAUTHORIZED)

        token = auth_header.split(" ")[1]
        decoded = jwt.decode(token, settings.SECRET_KEY, algorithms=["HS256"])
        user_id = decoded.get('user_id')

        User = get_user_model()
        user = User.objects.get(id=user_id)

        if user.role != 'admin':
            return Response({"errCode": 4, "message": "B·∫°n kh√¥ng c√≥ quy·ªÅn c·∫≠p nh·∫≠t b√°c sƒ©"}, status=status.HTTP_403_FORBIDDEN)

        data = request.data.copy()
        pharmacist_id = data.get("id")
        if not pharmacist_id:
            return Response({"errCode": 5, "message": "Thi·∫øu id b√°c sƒ©"}, status=status.HTTP_400_BAD_REQUEST)

        pharmacist = Pharmacist.objects.filter(id=pharmacist_id).first()
        if not pharmacist:
            return Response({"errCode": 6, "message": "Kh√¥ng t√¨m th·∫•y b√°c sƒ©"}, status=status.HTTP_404_NOT_FOUND)

        # ‚úÖ Xo√° ·∫£nh c≈©
        old_image_name = data.get("image_name")
        if old_image_name:
            old_path = os.path.join(IMAGE_PHARMA, old_image_name)
            if os.path.exists(old_path):
                os.remove(old_path)

        # ‚úÖ X·ª≠ l√Ω ·∫£nh m·ªõi
        image_base64 = data.get("image")
        if image_base64 and image_base64.strip() != "":
            try:
                if "base64," in image_base64:
                    format_info, imgstr = image_base64.split(";base64,")
                    mime_type = format_info.split(":")[-1].lower()
                    ext = mimetypes.guess_extension(mime_type) or '.jpg'
                    ext = ext.lstrip('.')
                else:
                    imgstr = image_base64
                    ext = "jpg"

                if ext not in ['png', 'jpg', 'jpeg', 'webp', 'gif']:
                    return Response({
                        "errCode": 11,
                        "message": f"ƒê·ªãnh d·∫°ng ·∫£nh kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£: {ext}"
                    }, status=status.HTTP_400_BAD_REQUEST)

                timestamp = int(time.time())
                unique_id = uuid.uuid4().hex[:8]
                file_name = f"{timestamp}-{unique_id}.{ext}"

                os.makedirs(IMAGE_PHARMA, exist_ok=True)
                image_path = os.path.join(IMAGE_PHARMA, file_name)
                with open(image_path, "wb") as f:
                    f.write(base64.b64decode(imgstr))

                data["image"] = file_name  # c·∫≠p nh·∫≠t ·∫£nh m·ªõi v√†o DB
            except Exception as e:
                return Response({
                    "errCode": 12,
                    "message": "L·ªói x·ª≠ l√Ω ·∫£nh base64",
                    "error": str(e)
                }, status=status.HTTP_400_BAD_REQUEST)

        # ‚úÖ C·∫≠p nh·∫≠t b√°c sƒ©
        serializer = PharmacistSerializer(pharmacist, data=data, partial=True)
        if serializer.is_valid():
            serializer.save()
            return Response({
                "errCode": 0,
                "message": "C·∫≠p nh·∫≠t y t√° th√†nh c√¥ng",
                "data": serializer.data
            }, status=status.HTTP_200_OK)

        return Response({
            "errCode": 2,
            "message": "L·ªói d·ªØ li·ªáu ƒë·∫ßu v√†o",
            "errors": serializer.errors
        }, status=status.HTTP_400_BAD_REQUEST)

    except jwt.ExpiredSignatureError:
        return Response({"errCode": 5, "message": "Token ƒë√£ h·∫øt h·∫°n"}, status=status.HTTP_401_UNAUTHORIZED)
    except jwt.InvalidTokenError:
        return Response({"errCode": 6, "message": "Token kh√¥ng h·ª£p l·ªá"}, status=status.HTTP_401_UNAUTHORIZED)
    except Exception as e:
        return Response({
            "errCode": 99,
            "message": "L·ªói kh√¥ng x√°c ƒë·ªãnh",
            "error": str(e)
        }, status=status.HTTP_500_INTERNAL_SERVER_ERROR)
        

@api_view(['POST'])
@permission_classes([IsAuthenticated])
@transaction.atomic
def create_cashier(request):
    try:
        user = request.user
        if not user.is_authenticated:
            return Response({"errCode": 3, "message": "Ch∆∞a x√°c th·ª±c"}, status=status.HTTP_401_UNAUTHORIZED)

        if user.role != 'admin':
            return Response({"errCode": 4, "message": "B·∫°n kh√¥ng c√≥ quy·ªÅn t·∫°o thu ng√¢n"}, status=status.HTTP_403_FORBIDDEN)

        data = request.data.copy()

        # üìå Ki·ªÉm tra email ƒë√£ t·ªìn t·∫°i ch∆∞a
        User = get_user_model()
        if User.objects.filter(email=data.get("email")).exists():
            return Response({"errCode": 9, "message": "Email ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng"}, status=status.HTTP_400_BAD_REQUEST)

        # üìå X·ª≠ l√Ω ·∫£nh base64
        image_base64 = data.get("image")
        if not image_base64 or image_base64.strip() == "":
            return Response({
                "errCode": 10,
                "message": "·∫¢nh kh√¥ng h·ª£p l·ªá ho·∫∑c kh√¥ng c√≥ ·∫£nh"
            }, status=status.HTTP_400_BAD_REQUEST)

        try:
            if "base64," in image_base64:
                format_info, imgstr = image_base64.split(";base64,")
                mime_type = format_info.split(":")[-1].lower()
                ext = mimetypes.guess_extension(mime_type) or '.jpg'
                ext = ext.lstrip('.')
            else:
                imgstr = image_base64
                ext = "jpg"

            if ext not in ['png', 'jpg', 'jpeg', 'webp', 'gif']:
                return Response({
                    "errCode": 11,
                    "message": f"ƒê·ªãnh d·∫°ng ·∫£nh kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£: {ext}"
                }, status=status.HTTP_400_BAD_REQUEST)

            timestamp = int(time.time())
            unique_id = uuid.uuid4().hex[:8]
            file_name = f"{timestamp}-{unique_id}.{ext}"

            os.makedirs(IMAGE_CASHIER, exist_ok=True)
            image_path = os.path.join(IMAGE_CASHIER, file_name)
            with open(image_path, "wb") as f:
                f.write(base64.b64decode(imgstr))

            data["image"] = file_name

        except Exception as e:
            return Response({
                "errCode": 12,
                "message": "L·ªói x·ª≠ l√Ω ·∫£nh base64",
                "error": str(e)
            }, status=status.HTTP_400_BAD_REQUEST)

        # üìå T·∫°o user m·ªõi cho thu ng√¢n
        new_user = User.objects.create_user(
            email=data.get("email"),
            password=data.get("password"),
            role="cashier"
        )
        data["user"] = new_user.id

        serializer = CashierSerializer(data=data)
        if serializer.is_valid():
            serializer.save()
            return Response({
                "errCode": 0,
                "message": "T·∫°o thu ng√¢n th√†nh c√¥ng",
                "data": serializer.data
            }, status=status.HTTP_201_CREATED)

        new_user.delete()
        return Response({
            "errCode": 1,
            "message": "L·ªói d·ªØ li·ªáu ƒë·∫ßu v√†o",
            "errors": serializer.errors
        }, status=status.HTTP_400_BAD_REQUEST)

    except Exception as e:
        logger.error(f"L·ªói t·∫°o thu ng√¢n: {e}")
        return Response({
            "errCode": 2,
            "message": "L·ªói h·ªá th·ªëng",
            "error": str(e)
        }, status=status.HTTP_500_INTERNAL_SERVER_ERROR)


@api_view(['GET'])
@permission_classes([AllowAny])
def get_all_cashier_with_user_status(request):
    try:
        cashiers = Cashier.objects.select_related('user').all()
        
        cashier_list = []
        for cashier in cashiers:
            cashier_list.append({
                "id": cashier.id,
                "name": cashier.name,
                "date_of_birth": cashier.date_of_birth,
                "user_id": cashier.user.id,
                "phone":cashier.phone,
                "user": {
                    "is_active": cashier.user.is_active
                }
            })

        return Response({
            "errCode": 0,
            "message": "L·∫•y danh s√°ch kƒ© thu·∫≠t vi√™n th√†nh c√¥ng",
            "method": request.method,
            "data": cashier_list
        }, status=200)

    except Exception as e:
        return Response({
            "errCode": 2,
            "message": "L·ªói h·ªá th·ªëng",
            "method": request.method,
            "error": str(e),
            "data": []
        }, status=500)
        
        
      
@api_view(['GET'])
@permission_classes([AllowAny])
def get_cashier(request):
    try:
        cashier_id = request.GET.get('id')
        if not cashier_id:
            return Response({
                "errCode": 3,
                "message": "Thi·∫øu ID thu ng√¢n"
            }, status=400)

        cashier = Cashier.objects.get(id=cashier_id)

        data = model_to_dict(cashier)

        # ƒê·ªçc ·∫£nh v√† chuy·ªÉn sang base64 ƒë·ªãnh d·∫°ng chu·∫©n
        data['image_name']=cashier.image
        image_base64 = ""
        if cashier.image:
            image_path = os.path.join(IMAGE_CASHIER, cashier.image)
            if os.path.exists(image_path):
                mime_type, _ = mimetypes.guess_type(image_path)
                if mime_type:
                    with open(image_path, 'rb') as img_file:
                        encoded = base64.b64encode(img_file.read()).decode('utf-8')
                        image_base64 = f"data:{mime_type};base64,{encoded}"

        data['image'] = image_base64

        return Response({
            "errCode": 0,
            "message": "L·∫•y y t√° th√†nh c√¥ng",
            "method": request.method,
            "data": data
        }, status=200)

    except Cashier.DoesNotExist:
        return Response({
            "errCode": 1,
            "message": "Kh√¥ng t√¨m th·∫•y kƒ© thu·∫≠t vi√™n",
            "data": {}
        }, status=404)

    except Exception as e:
        return Response({
            "errCode": 2,
            "message": "L·ªói h·ªá th·ªëng",
            "method": request.method,
            "error": str(e),
            "data": {}
        }, status=500)

@api_view(['GET'])
@permission_classes([IsAuthenticated])
def get_cashier_by_token(request):
    try:
        user = request.user  # <-- ƒê√£ c√≥ user ·ªü ƒë√¢y
        cashier = Cashier.objects.filter(user=user).first()

        if cashier:
            data = {
                "name": cashier.name
            }
        else:
            data = {}

        return Response({
            "errCode": 0,
            "message": "Truy v·∫•n th√†nh c√¥ng",
            "method": request.method,
            "data": data
        })

    except Exception as e:
        return Response({
            "errCode": 2,
            "message": "L·ªói h·ªá th·ªëng",
            "method": request.method,
            "error": str(e),
            "data": {}
        }, status=500) 



@api_view(['GET'])
@permission_classes([IsAuthenticated])
def get_doctor_by_token(request):
    try:
        user = request.user  # <-- ƒê√£ c√≥ user ·ªü ƒë√¢y
        doctor = Doctor.objects.filter(user=user).first()

        if doctor:
            data = {
                "name": doctor.name
            }
        else:
            data = {}

        return Response({
            "errCode": 0,
            "message": "Truy v·∫•n th√†nh c√¥ng",
            "method": request.method,
            "data": data
        })

    except Exception as e:
        return Response({
            "errCode": 2,
            "message": "L·ªói h·ªá th·ªëng",
            "method": request.method,
            "error": str(e),
            "data": {}
        }, status=500) 

@api_view(['GET'])
@permission_classes([IsAuthenticated])
def get_technician_by_token(request):
    try:
        user = request.user  # <-- ƒê√£ c√≥ user ·ªü ƒë√¢y
        tech = Technician.objects.filter(user=user).first()

        if tech:
            data = {
                "name": tech.name
            }
        else:
            data = {}

        return Response({
            "errCode": 0,
            "message": "Truy v·∫•n th√†nh c√¥ng",
            "method": request.method,
            "data": data
        })

    except Exception as e:
        return Response({
            "errCode": 2,
            "message": "L·ªói h·ªá th·ªëng",
            "method": request.method,
            "error": str(e),
            "data": {}
        }, status=500) 
        

@api_view(['GET'])
@permission_classes([IsAuthenticated])
def get_pharmacist_by_token(request):
    try:
        user = request.user  # <-- ƒê√£ c√≥ user ·ªü ƒë√¢y
        phar = Pharmacist.objects.filter(user=user).first()

        if phar:
            data = {
                "name": phar.name
            }
        else:
            data = {}

        return Response({
            "errCode": 0,
            "message": "Truy v·∫•n th√†nh c√¥ng",
            "data": data
        })

    except Exception as e:
        return Response({
            "errCode": 2,
            "message": "L·ªói h·ªá th·ªëng",
            "method": request.method,
            "data": {}
        }, status=500) 
        
          
@api_view(['GET'])
@permission_classes([AllowAny])
def get_cashier_by_user(request):
    try:
        user_id = request.GET.get('id')
        if not user_id:
            return Response({
                "errCode": 3,
                "message": "Thi·∫øu ID ng∆∞·ªùi d√πng"
            }, status=400)

        # T√¨m thu ng√¢n theo user_id
        cashier = Cashier.objects.filter(user_id=user_id).first()

        if cashier:
            data = {
                "name": cashier.name
            }
        else:
            data = {}  # Kh√¥ng c√≥ thu ng√¢n nh∆∞ng v·∫´n errCode = 0

        return Response({
            "errCode": 0,
            "message": "Truy v·∫•n th√†nh c√¥ng",
            "method": request.method,
            "data": data
        }, status=200)

    except Exception as e:
        return Response({
            "errCode": 2,
            "message": "L·ªói h·ªá th·ªëng",
            "method": request.method,
            "error": str(e),
            "data": {}
        }, status=500)
      
@api_view(['PUT'])
@transaction.atomic
def update_cashier(request):
    try:
        auth_header = request.headers.get('Authorization')
        if not auth_header or not auth_header.startswith("Bearer "):
            return Response({"errCode": 3, "message": "Thi·∫øu ho·∫∑c sai ƒë·ªãnh d·∫°ng token"}, status=status.HTTP_401_UNAUTHORIZED)

        token = auth_header.split(" ")[1]
        decoded = jwt.decode(token, settings.SECRET_KEY, algorithms=["HS256"])
        user_id = decoded.get('user_id')

        User = get_user_model()
        user = User.objects.get(id=user_id)

        if user.role != 'admin':
            return Response({"errCode": 4, "message": "B·∫°n kh√¥ng c√≥ quy·ªÅn c·∫≠p nh·∫≠t b√°c sƒ©"}, status=status.HTTP_403_FORBIDDEN)

        data = request.data.copy()
        cashier_id = data.get("id")
        if not cashier_id:
            return Response({"errCode": 5, "message": "Thi·∫øu id b√°c sƒ©"}, status=status.HTTP_400_BAD_REQUEST)

        cashier = Cashier.objects.filter(id=cashier_id).first()
        if not cashier:
            return Response({"errCode": 6, "message": "Kh√¥ng t√¨m th·∫•y b√°c sƒ©"}, status=status.HTTP_404_NOT_FOUND)

        # ‚úÖ Xo√° ·∫£nh c≈©
        old_image_name = data.get("image_name")
        if old_image_name:
            old_path = os.path.join(IMAGE_CASHIER, old_image_name)
            if os.path.exists(old_path):
                os.remove(old_path)

        # ‚úÖ X·ª≠ l√Ω ·∫£nh m·ªõi
        image_base64 = data.get("image")
        if image_base64 and image_base64.strip() != "":
            try:
                if "base64," in image_base64:
                    format_info, imgstr = image_base64.split(";base64,")
                    mime_type = format_info.split(":")[-1].lower()
                    ext = mimetypes.guess_extension(mime_type) or '.jpg'
                    ext = ext.lstrip('.')
                else:
                    imgstr = image_base64
                    ext = "jpg"

                if ext not in ['png', 'jpg', 'jpeg', 'webp', 'gif']:
                    return Response({
                        "errCode": 11,
                        "message": f"ƒê·ªãnh d·∫°ng ·∫£nh kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£: {ext}"
                    }, status=status.HTTP_400_BAD_REQUEST)

                timestamp = int(time.time())
                unique_id = uuid.uuid4().hex[:8]
                file_name = f"{timestamp}-{unique_id}.{ext}"

                os.makedirs(IMAGE_CASHIER, exist_ok=True)
                image_path = os.path.join(IMAGE_CASHIER, file_name)
                with open(image_path, "wb") as f:
                    f.write(base64.b64decode(imgstr))

                data["image"] = file_name  # c·∫≠p nh·∫≠t ·∫£nh m·ªõi v√†o DB
            except Exception as e:
                return Response({
                    "errCode": 12,
                    "message": "L·ªói x·ª≠ l√Ω ·∫£nh base64",
                    "error": str(e)
                }, status=status.HTTP_400_BAD_REQUEST)

        # ‚úÖ C·∫≠p nh·∫≠t b√°c sƒ©
        serializer = CashierSerializer(cashier, data=data, partial=True)
        if serializer.is_valid():
            serializer.save()
            return Response({
                "errCode": 0,
                "message": "C·∫≠p nh·∫≠t y t√° th√†nh c√¥ng",
                "data": serializer.data
            }, status=status.HTTP_200_OK)

        return Response({
            "errCode": 2,
            "message": "L·ªói d·ªØ li·ªáu ƒë·∫ßu v√†o",
            "errors": serializer.errors
        }, status=status.HTTP_400_BAD_REQUEST)

    except jwt.ExpiredSignatureError:
        return Response({"errCode": 5, "message": "Token ƒë√£ h·∫øt h·∫°n"}, status=status.HTTP_401_UNAUTHORIZED)
    except jwt.InvalidTokenError:
        return Response({"errCode": 6, "message": "Token kh√¥ng h·ª£p l·ªá"}, status=status.HTTP_401_UNAUTHORIZED)
    except Exception as e:
        return Response({
            "errCode": 99,
            "message": "L·ªói kh√¥ng x√°c ƒë·ªãnh",
            "error": str(e)
        }, status=status.HTTP_500_INTERNAL_SERVER_ERROR)



@api_view(['GET'])
@permission_classes([AllowAny])
def get_select_all_doctor(request):
    try:
        # CH·ªà L·∫§Y CASHIER c√≥ user ƒëang ho·∫°t ƒë·ªông (is_active=True)
        doctors = Doctor.objects.select_related('user').filter(user__is_active=True)
        
        doctor_list = []
        for dt in doctors:
            doctor_list.append({
                "value": dt.user_id,
                "label": dt.name,
            })

        return Response({
            "errCode": 0,
            "message": "L·∫•y danh s√°ch doctor th√†nh c√¥ng",
            "method": request.method,
            "data": doctor_list
        }, status=200)

    except Exception as e:
        return Response({
            "errCode": 2,
            "message": "L·ªói h·ªá th·ªëng",
            "method": request.method,
            "error": str(e),
            "data": []
        }, status=500)

@api_view(['GET'])
@permission_classes([AllowAny])
def get_select_all_nurse(request):
    try:
        # CH·ªà L·∫§Y CASHIER c√≥ user ƒëang ho·∫°t ƒë·ªông (is_active=True)
        nurses = Nurse.objects.select_related('user').filter(user__is_active=True)
        
        nurse_list = []
        for dt in nurses:
            nurse_list.append({
                "value": dt.user_id,
                "label": dt.name,
            })

        return Response({
            "errCode": 0,
            "message": "L·∫•y danh s√°ch doctor th√†nh c√¥ng",
            "method": request.method,
            "data": nurse_list
        }, status=200)

    except Exception as e:
        return Response({
            "errCode": 2,
            "message": "L·ªói h·ªá th·ªëng",
            "method": request.method,
            "error": str(e),
            "data": []
        }, status=500)
  
@api_view(['GET'])
@permission_classes([AllowAny])
def get_all_doctor_home(request):
    try:
        doctors = Doctor.objects.select_related('user').filter(user__is_active=True)
        doctor_list = []

        for doc in doctors:
            image_path = os.path.join(IMAGE_DOCTOR, doc.image or "")
            image_base64 = None

            if os.path.isfile(image_path):
                mime_type, _ = mimetypes.guess_type(image_path)
                with open(image_path, 'rb') as img_file:
                    base64_str = base64.b64encode(img_file.read()).decode('utf-8')
                    if mime_type:
                        image_base64 = f"data:{mime_type};base64,{base64_str}"
                    else:
                        image_base64 = base64_str

            doctor_list.append({
                "id": doc.id,
                "name": doc.name,
                "user_id": doc.user_id,
                "degree": doc.degree,
                "image": image_base64,
            })

        return Response({
            "errCode": 0,
            "message": "L·∫•y danh s√°ch b√°c sƒ© th√†nh c√¥ng",
            "method": request.method,
            "data": doctor_list
        }, status=200)

    except Exception as e:
        return Response({
            "errCode": 2,
            "message": "L·ªói h·ªá th·ªëng",
            "method": request.method,
            "error": str(e),
            "data": []
        }, status=500)
        
        
@api_view(['GET'])
@permission_classes([AllowAny])
def get_doctor_by_user_id(request):
    try:
        userId = request.GET.get('id')
        if not userId:
            return Response({
                "errCode": 3,
                "message": "Thi·∫øu ID b√°c sƒ©"
            }, status=400)

        doctor = Doctor.objects.get(user_id=userId)

        data = model_to_dict(doctor)

        # ƒê·ªçc ·∫£nh v√† chuy·ªÉn sang base64 ƒë·ªãnh d·∫°ng chu·∫©n
        data['image_name']=doctor.image
        image_base64 = ""
        if doctor.image:
            image_path = os.path.join(IMAGE_DOCTOR, doctor.image)
            if os.path.exists(image_path):
                mime_type, _ = mimetypes.guess_type(image_path)
                if mime_type:
                    with open(image_path, 'rb') as img_file:
                        encoded = base64.b64encode(img_file.read()).decode('utf-8')
                        image_base64 = f"data:{mime_type};base64,{encoded}"

        data['image'] = image_base64

        return Response({
            "errCode": 0,
            "message": "L·∫•y b√°c sƒ© th√†nh c√¥ng",
            "method": request.method,
            "data": data
        }, status=200)

    except Doctor.DoesNotExist:
        return Response({
            "errCode": 1,
            "message": "Kh√¥ng t√¨m th·∫•y b√°c sƒ©",
            "data": {}
        }, status=200)

    except Exception as e:
        return Response({
            "errCode": 2,
            "message": "L·ªói h·ªá th·ªëng",
            "method": request.method,
            "error": str(e),
            "data": {}
        }, status=500)


@api_view(['POST'])
@transaction.atomic
def create_patient_record(request):
    try:
        # üìå L·∫•y token t·ª´ header
        auth_header = request.headers.get('Authorization')
        if not auth_header or not auth_header.startswith("Bearer "):
            return Response({"errCode": 3, "message": "Thi·∫øu ho·∫∑c sai ƒë·ªãnh d·∫°ng token"}, status=status.HTTP_401_UNAUTHORIZED)

        token = auth_header.split(" ")[1]

        try:
            decoded = jwt.decode(token, settings.SECRET_KEY, algorithms=["HS256"])
            user_id = decoded.get('user_id')
            if not user_id:
                return Response({"errCode": 7, "message": "Token kh√¥ng ch·ª©a user_id"}, status=status.HTTP_401_UNAUTHORIZED)

            User = get_user_model()
            user = User.objects.get(id=user_id)

        except jwt.ExpiredSignatureError:
            return Response({"errCode": 5, "message": "Token ƒë√£ h·∫øt h·∫°n"}, status=status.HTTP_401_UNAUTHORIZED)
        except jwt.InvalidTokenError:
            return Response({"errCode": 6, "message": "Token kh√¥ng h·ª£p l·ªá"}, status=status.HTTP_401_UNAUTHORIZED)
        except User.DoesNotExist:
            return Response({"errCode": 8, "message": "Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i"}, status=status.HTTP_404_NOT_FOUND)

        # üìå Chu·∫©n b·ªã d·ªØ li·ªáu g·ª≠i sang serializer
        data = request.data.copy()
        data["user"] = user_id  # G√°n ID ng∆∞·ªùi d√πng v√†o tr∆∞·ªùng user (ForeignKey)

        # üìå X·ª≠ l√Ω ·∫£nh base64
        image_base64 = data.get("image")
        if not image_base64 or image_base64.strip() == "":
            return Response({
                "errCode": 10,
                "message": "·∫¢nh kh√¥ng h·ª£p l·ªá ho·∫∑c kh√¥ng c√≥ ·∫£nh"
            }, status=status.HTTP_400_BAD_REQUEST)

        try:
            if "base64," in image_base64:
                format_info, imgstr = image_base64.split(";base64,")
                mime_type = format_info.split(":")[-1].lower()
                ext = mimetypes.guess_extension(mime_type) or '.jpg'
                ext = ext.lstrip('.')
            else:
                imgstr = image_base64
                ext = "jpg"

            if ext not in ['png', 'jpg', 'jpeg', 'webp', 'gif']:
                return Response({
                    "errCode": 11,
                    "message": f"ƒê·ªãnh d·∫°ng ·∫£nh kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£: {ext}"
                }, status=status.HTTP_400_BAD_REQUEST)

            timestamp = int(time.time())
            unique_id = uuid.uuid4().hex[:8]
            file_name = f"{timestamp}-{unique_id}.{ext}"

            os.makedirs(IMAGE_PATIENT, exist_ok=True)
            image_path = os.path.join(IMAGE_PATIENT, file_name)
            with open(image_path, "wb") as f:
                f.write(base64.b64decode(imgstr))

            data["image"] = file_name  # G√°n t√™n ·∫£nh m·ªõi v√†o data

        except Exception as e:
            return Response({
                "errCode": 12,
                "message": "L·ªói x·ª≠ l√Ω ·∫£nh base64",
                "error": str(e)
            }, status=status.HTTP_400_BAD_REQUEST)

        # üìå G·ª≠i sang serializer ƒë·ªÉ l∆∞u Nurse
        serializer = PatientSerializer(data=data)
        if serializer.is_valid():
            serializer.save()
            return Response({
                "errCode": 0,
                "message": "T·∫°o h·ªì s∆° b·ªánh nh√¢n th√†nh c√¥ng",
                "data": serializer.data
            }, status=status.HTTP_201_CREATED)

        return Response({
            "errCode": 1,
            "message": "L·ªói d·ªØ li·ªáu ƒë·∫ßu v√†o",
            "errors": serializer.errors
        }, status=status.HTTP_400_BAD_REQUEST)

    except Exception as e:
        logger.error(f"L·ªói t·∫°o H·ªì s∆° b·∫πnh nh√¢n: {e}")
        return Response({
            "errCode": 2,
            "message": "L·ªói h·ªá th·ªëng",
            "error": str(e)
        }, status=status.HTTP_500_INTERNAL_SERVER_ERROR)

@api_view(['GET'])
@permission_classes([IsAuthenticated])
@transaction.atomic
def get_all_patient_records_by_user(request):
    try:
        user = request.user
        user_id = user.id

        patients = Patient.objects.filter(user_id=user_id).values("id", "name", "date_of_birth", "image")

        result = []
        for patient in patients:
            data = {
                "id": patient["id"],
                "name": patient["name"],
                "date_of_birth": patient["date_of_birth"],
                "image_name": patient["image"],
                "image": ""
            }

            if patient["image"]:
                image_path = os.path.join(IMAGE_PATIENT, patient["image"])
                if os.path.exists(image_path):
                    mime_type, _ = mimetypes.guess_type(image_path)
                    if mime_type:
                        with open(image_path, "rb") as img_file:
                            encoded = base64.b64encode(img_file.read()).decode("utf-8")
                            data["image"] = f"data:{mime_type};base64,{encoded}"

            result.append(data)

        return Response({
            "errCode": 0,
            "message": "L·∫•y danh s√°ch h·ªì s∆° b·ªánh nh√¢n th√†nh c√¥ng",
            "data": result
        }, status=status.HTTP_200_OK)

    except Exception as e:
        logger.error(f"L·ªói khi l·∫•y h·ªì s∆° b·ªánh nh√¢n: {e}")
        return Response({
            "errCode": 2,
            "message": "L·ªói h·ªá th·ªëng",
            "error": str(e)
        }, status=status.HTTP_500_INTERNAL_SERVER_ERROR)
        
        
@api_view(['GET'])
def get_patient_record_by_id(request):
    try:
        # L·∫•y token t·ª´ header
        auth_header = request.headers.get('Authorization')
        if not auth_header or not auth_header.startswith("Bearer "):
            return Response({"errCode": 3, "message": "Thi·∫øu ho·∫∑c sai ƒë·ªãnh d·∫°ng token"}, status=status.HTTP_401_UNAUTHORIZED)

        token = auth_header.split(" ")[1]

        try:
            decoded = jwt.decode(token, settings.SECRET_KEY, algorithms=["HS256"])
            user_id = decoded.get('user_id')
            if not user_id:
                return Response({"errCode": 7, "message": "Token kh√¥ng ch·ª©a user_id"}, status=status.HTTP_401_UNAUTHORIZED)

            User = get_user_model()
            user = User.objects.get(id=user_id)  # Ki·ªÉm tra user t·ªìn t·∫°i

        except jwt.ExpiredSignatureError:
            return Response({"errCode": 5, "message": "Token ƒë√£ h·∫øt h·∫°n"}, status=status.HTTP_401_UNAUTHORIZED)
        except jwt.InvalidTokenError:
            return Response({"errCode": 6, "message": "Token kh√¥ng h·ª£p l·ªá"}, status=status.HTTP_401_UNAUTHORIZED)
        except User.DoesNotExist:
            return Response({"errCode": 8, "message": "Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i"}, status=status.HTTP_404_NOT_FOUND)

        # L·∫•y id t·ª´ query string
        patient_id = request.GET.get('id')  # L·∫•y gi√° tr·ªã id t·ª´ query string

        if not patient_id:
            return Response({"errCode": 1, "message": "Thi·∫øu tham s·ªë id trong query string"}, status=status.HTTP_400_BAD_REQUEST)

        # L·∫•y h·ªì s∆° b·ªánh nh√¢n theo user_id v√† patient_id
        patient = Patient.objects.filter(user_id=user_id, id=patient_id).first()

        if not patient:
            return Response({"errCode": 9, "message": "B·ªánh nh√¢n kh√¥ng t·ªìn t·∫°i"}, status=status.HTTP_404_NOT_FOUND)

        # Serialize d·ªØ li·ªáu
        patient_data = PatientSerializer(patient).data

        # Tr·∫£ v·ªÅ h√¨nh ·∫£nh base64 v√† t√™n t·ªáp h√¨nh ·∫£nh g·ªëc
        if patient.image:
            image_path = os.path.join(IMAGE_PATIENT, patient.image)
            
            # X·ª≠ l√Ω h√¨nh ·∫£nh base64
            if os.path.exists(image_path):
                mime_type, _ = mimetypes.guess_type(image_path)
                if mime_type:
                    with open(image_path, "rb") as img_file:
                        encoded = base64.b64encode(img_file.read()).decode("utf-8")
                        patient_data["image"] = f"data:{mime_type};base64,{encoded}"
            
            # Th√™m tr∆∞·ªùng 'image_name' ch·ª©a t√™n t·ªáp g·ªëc
            patient_data["image_name"] = patient.image

        return Response({
            "errCode": 0,
            "message": "L·∫•y h·ªì s∆° b·ªánh nh√¢n th√†nh c√¥ng",
            "data": patient_data
        }, status=status.HTTP_200_OK)

    except Exception as e:
        logger.error(f"L·ªói khi l·∫•y h·ªì s∆° b·ªánh nh√¢n: {e}")
        return Response({
            "errCode": 2,
            "message": "L·ªói h·ªá th·ªëng",
            "error": str(e)
        }, status=status.HTTP_500_INTERNAL_SERVER_ERROR)

@api_view(['PUT'])
@transaction.atomic
def update_patient_record(request):
    try:
        # üìå L·∫•y token t·ª´ header
        auth_header = request.headers.get('Authorization')
        if not auth_header or not auth_header.startswith("Bearer "):
            return Response({"errCode": 3, "message": "Thi·∫øu ho·∫∑c sai ƒë·ªãnh d·∫°ng token"}, status=status.HTTP_401_UNAUTHORIZED)

        token = auth_header.split(" ")[1]

        try:
            decoded = jwt.decode(token, settings.SECRET_KEY, algorithms=["HS256"])
            user_id = decoded.get('user_id')
            if not user_id:
                return Response({"errCode": 7, "message": "Token kh√¥ng ch·ª©a user_id"}, status=status.HTTP_401_UNAUTHORIZED)

            User = get_user_model()
            user = User.objects.get(id=user_id)

        except jwt.ExpiredSignatureError:
            return Response({"errCode": 5, "message": "Token ƒë√£ h·∫øt h·∫°n"}, status=status.HTTP_401_UNAUTHORIZED)
        except jwt.InvalidTokenError:
            return Response({"errCode": 6, "message": "Token kh√¥ng h·ª£p l·ªá"}, status=status.HTTP_401_UNAUTHORIZED)
        except User.DoesNotExist:
            return Response({"errCode": 8, "message": "Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i"}, status=status.HTTP_404_NOT_FOUND)

        # üìå L·∫•y ID h·ªì s∆° c·∫ßn s·ª≠a t·ª´ body
        data = request.data.copy()
        patient_id = data.get("id")

        if not patient_id:
            return Response({"errCode": 1, "message": "Thi·∫øu ID b·ªánh nh√¢n"}, status=status.HTTP_400_BAD_REQUEST)

        patient = Patient.objects.filter(id=patient_id, user_id=user_id).first()
        if not patient:
            return Response({"errCode": 9, "message": "H·ªì s∆° b·ªánh nh√¢n kh√¥ng t·ªìn t·∫°i"}, status=status.HTTP_404_NOT_FOUND)

        # üìå Xo√° ·∫£nh c≈© n·∫øu c√≥ image_name
        old_image_name = data.get("image_name")
        if old_image_name:
            old_image_path = os.path.join(IMAGE_PATIENT, old_image_name)
            if os.path.exists(old_image_path):
                os.remove(old_image_path)

        # üìå X·ª≠ l√Ω ·∫£nh base64 m·ªõi n·∫øu c√≥
        image_base64 = data.get("image")
        if image_base64 and image_base64.strip() != "":
            try:
                if "base64," in image_base64:
                    format_info, imgstr = image_base64.split(";base64,")
                    mime_type = format_info.split(":")[-1].lower()
                    ext = mimetypes.guess_extension(mime_type) or '.jpg'
                    ext = ext.lstrip('.')
                else:
                    imgstr = image_base64
                    ext = "jpg"

                if ext not in ['png', 'jpg', 'jpeg', 'webp', 'gif']:
                    return Response({
                        "errCode": 11,
                        "message": f"ƒê·ªãnh d·∫°ng ·∫£nh kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£: {ext}"
                    }, status=status.HTTP_400_BAD_REQUEST)

                timestamp = int(time.time())
                unique_id = uuid.uuid4().hex[:8]
                file_name = f"{timestamp}-{unique_id}.{ext}"

                os.makedirs(IMAGE_PATIENT, exist_ok=True)
                image_path = os.path.join(IMAGE_PATIENT, file_name)
                with open(image_path, "wb") as f:
                    f.write(base64.b64decode(imgstr))

                data["image"] = file_name  # G√°n t√™n file ·∫£nh m·ªõi
            except Exception as e:
                return Response({
                    "errCode": 12,
                    "message": "L·ªói x·ª≠ l√Ω ·∫£nh base64",
                    "error": str(e)
                }, status=status.HTTP_400_BAD_REQUEST)
        else:
            data["image"] = patient.image  # Kh√¥ng g·ª≠i ·∫£nh m·ªõi th√¨ gi·ªØ l·∫°i ·∫£nh c≈©

        # üìå C·∫≠p nh·∫≠t d·ªØ li·ªáu
        serializer = PatientSerializer(patient, data=data, partial=True)
        if serializer.is_valid():
            serializer.save()
            return Response({
                "errCode": 0,
                "message": "C·∫≠p nh·∫≠t h·ªì s∆° b·ªánh nh√¢n th√†nh c√¥ng",
                "data": serializer.data
            }, status=status.HTTP_200_OK)

        return Response({
            "errCode": 1,
            "message": "L·ªói d·ªØ li·ªáu ƒë·∫ßu v√†o",
            "errors": serializer.errors
        }, status=status.HTTP_400_BAD_REQUEST)

    except Exception as e:
        logger.error(f"L·ªói c·∫≠p nh·∫≠t h·ªì s∆° b·ªánh nh√¢n: {e}")
        return Response({
            "errCode": 2,
            "message": "L·ªói h·ªá th·ªëng",
            "error": str(e)
        }, status=status.HTTP_500_INTERNAL_SERVER_ERROR)
